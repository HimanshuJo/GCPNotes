gcloud compute instances create www1 \
    --zone=Zone \
    --tags=network-lb-tag \
    --machine-type=e2-small \
    --image-family=debian-11 \
    --image-project=debian-cloud \
    --metadata=startup-script='cat << EOF > startup.sh
                              #! /bin/bash
                              apt-get update
                              apt-get install -y nginx
                              service nginx start
                              sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
                              EOF'

-------

gcloud compute instances create www2 \
    --zone=Zone \
    --tags=network-lb-tag \
    --machine-type=e2-small \
    --image-family=debian-11 \
    --image-project=debian-cloud \
    --metadata=startup-script='cat << EOF > startup.sh
                              #! /bin/bash
                              apt-get update
                              apt-get install -y nginx
                              service nginx start
                              sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
                              EOFl'

-------

gcloud config set compute/region Region

gcloud config set compute/zone Zone

-------

gcloud container clusters create --machine-type=e2-medium --zone=europe-west4-b one-cluster

kubectl create deployment hello-app --image=gcr.io/google-samples/hello-app:2.0

kubectl expose deployment hello-app --type=LoadBalancer --port 8082

-------

gcloud compute backend-services add-backend nginx-backend-service \
    --instance-group nginx-group \
    --instance-group-zone us-central1-b \
    --global

-------

-- compute region and zone

-------

# Step 1: Create an instance template
gcloud compute instance-templates create nginx-template \
    --metadata startup-script='#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- "s/nginx/Google Cloud Platform - "\$HOSTNAME"/" /var/www/html/index.nginx-debian.html' \
    --tags http-server

# Step 2: Create a target pool
gcloud compute target-pools create nginx-target-pool \
    --region REGION

# Step 3: Create a managed instance group
gcloud compute instance-groups managed create nginx-group \
    --base-instance-name nginx \
    --size 2 \
    --template nginx-template

# Step 4: Create a firewall rule to allow traffic (80/tcp)
gcloud compute firewall-rules create allow-http \
    --allow tcp:80

# Step 5: Create a health check
gcloud compute health-checks create http nginx-health-check \
    --port 80

# Step 6: Create a backend service and attach the managed instance group
gcloud compute backend-services create nginx-backend-service \
    --protocol HTTP \
    --health-checks nginx-health-check \
    --global

gcloud compute backend-services add-backend nginx-backend-service \
    --instance-group nginx-group \
    --instance-group-zone ZONE \
    --global

# Step 7: Create a URL map
gcloud compute url-maps create nginx-url-map \
    --default-route-action global-backend-services/nginx-backend-service

# Step 8: Create a target HTTP proxy
gcloud compute url-maps create nginx-url-map \
    --default-service nginx-backend-service

# Step 9: Create a global forwarding rule
gcloud compute forwarding-rules create nginx-forwarding-rule \
    --global \
    --target-http-proxy nginx-proxy \
    --ports 80

-------

gsutil mb -l us-central1 -c STANDARD -p qwiklabs-gcp-02-32edfa6c5965 gs://qwiklabs-gcp-02-32edfa6c5965-bucket
