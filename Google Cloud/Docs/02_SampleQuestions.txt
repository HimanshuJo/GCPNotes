You significantly changed a complex Deployment Manager template and want to confirm that the dependencies of all defined resources are properly met before committing it to the project. You want the most rapid feedback on your changes. What should you do? [Question 22]

 	A. Use granular logging statements within a Deployment Manager template authored in Python.
	
	B. Monitor activity of the Deployment Manager execution on the Stackdriver Logging page of the GCP Console.
	
	C. Execute the Deployment Manager template against a separate project with the same configuration, and monitor for failures.
	
	D. Execute the Deployment Manager template using the -preview option in the same project, and observe the state of interdependent resources. [✔️]

	-------

	D. Execute the Deployment Manager template using the "-preview" option in the same project, and observe the state of interdependent resources.

	Explanation:
		
		The "-preview" option allows you to execute a Deployment Manager template in a preview mode, which means that the changes are not applied to the actual resources but are validated to ensure that dependencies are met and the deployment will succeed.
		
		By using the "-preview" option, you can quickly validate the changes without making any modifications to the existing resources in the project. It helps you catch any issues related to dependencies or resource conflicts before committing the changes.
		
		This provides a rapid feedback loop, allowing you to identify and address any problems in the Deployment Manager template before applying the changes to the production environment.

	Other Options:

		A. Use granular logging statements within a Deployment Manager template authored in Python: While logging statements can help in debugging, they may not provide a comprehensive validation of dependencies.
		
		B. Monitor activity of the Deployment Manager execution on the Stackdriver Logging page of the GCP Console: This is useful for reviewing logs during and after the deployment but may not provide a preview of the changes.
		
		C. Execute the Deployment Manager template against a separate project with the same configuration, and monitor for failures: This could be a valid approach, but using the "-preview" option in the same project provides a more direct and efficient way to validate changes.

	-------

	Bard:

		The correct answer is D. Execute the Deployment Manager template using the -preview option in the same project, and observe the state of interdependent resources.

			This is the most rapid and direct way to confirm that the dependencies of all defined resources are properly met. The -preview option allows you to run the deployment without actually modifying any resources, so you can quickly identify any errors or conflicts.

		The other options are not as suitable for this scenario:

			A. Using granular logging statements within a Deployment Manager template authored in Python can be helpful for debugging, but it is not the most efficient way to identify resource dependencies.

			B. Monitoring activity of the Deployment Manager execution on the Stackdriver Logging page of the GCP Console is a good way to troubleshoot problems that arise during deployment, but it does not provide real-time feedback on the status of resource dependencies.

			C. Executing the Deployment Manager template against a separate project with the same configuration can be useful for testing, but it is not as efficient as using the -preview option. Additionally, it can be difficult to keep the two projects synchronized.

-------

Your company has a 3-tier solution running on Compute Engine. The configuration of the current infrastructure is shown below. Each tier has a service account that is associated with all instances within it. You need to enable communication on TCP port 8080 between tiers as follows: Instances in tier #1 must communicate with tier #2. Instances in tier #2 must communicate with tier #3. What should you do?
[Question 53]  

	[VPC [Subnet Tier 1 #10.0.1.0/24 [Instance Tier 1(Compute Engine)]] [Subnet Tier 2 #10.0.2.0/24 [Instance Tier 2(Compute Engine)]] [Subnet Tier 3 #10.0.3.0/24 [Instance Tier 3(Compute Engine)]]]


	1. Create an ingress firewall rule with the following settings: Targets: all instances. Source filter: IP ranges (with the range set to 10.0.2.0/24). Protocols: allow all. 2. Create an ingress firewall rule with the following settings: Targets: all instances. Source filter: IP ranges (with the range set to 10.0.1.0/24). Protocols: allow all.

	2. Create an ingress firewall rule with the following settings: Targets: all instances with tier #2 service account. Source filter: all instances with tier #1 service account. Protocols: allow TCP: 8080. 2. Create an ingress firewall rule with the following settings: Targets: all instances with tier #3 service account. Source filter: all instances with tier #2 service account. Protocols: allow TCP: 8080. [✔️]
 	
 	3. Create an ingress firewall rule with the following settings: Targets: all instances with tier #2 service account. Source filter: all instances with tier #1 service account. Protocols: allow all. 2. Create an ingress firewall rule with the following settings: Targets: all instances with tier #3 service account. Source filter: all instances with tier #2 service account. Protocols: allow all.

	4. Create an egress firewall rule with the following settings: Targets: all instances. Source filter: IP ranges (with the range set to 10.0.2.0/24). Protocols: allow TCP: 8080. 2. Create an egress firewall rule with the following settings: Targets: all instances. Source filter: IP ranges (with the range set to 10.0.1.0/24). Protocols: allow TCP: 8080.

	-------

	Bard:

		Option 2: Create ingress firewall rules with service account-based source filters is the most secure and efficient way to enable communication between the tiers.

			The provided solution aims to enable communication between tiers while maintaining a secure network configuration. Option 1 is not recommended as it allows all instances to communicate with all other instances, regardless of their tier, which could lead to unauthorized access and data exposure.

		Option 3, which combines service account-based and IP-based source filters, is also not recommended as it introduces unnecessary complexity and overlaps with the intended security-focused approach.

		Option 2 effectively utilizes service account-based source filters to restrict communication between tiers based on the service account associated with each instance. This ensures that only instances with the appropriate service account can initiate communication, preventing unauthorized access.

		Specifically, two ingress firewall rules are created:

		Ingress Firewall Rule for Tier #2: This rule allows instances with the tier #2 service account to receive TCP traffic on port 8080 from instances with the tier #1 service account. This enables communication from tier #1 to tier #2.

		Ingress Firewall Rule for Tier #3: This rule allows instances with the tier #3 service account to receive TCP traffic on port 8080 from instances with the tier #2 service account. This enables communication from tier #2 to tier #3.

		By utilizing service account-based source filters, this approach provides a secure and granular way to control communication between tiers, effectively enabling the desired application functionality while maintaining a robust security posture.

-------

You are analyzing Google Cloud Platform service costs from three separate projects. You want to use this information to create service cost estimates by service type, daily and monthly, for the next six months using standard query syntax. What should you do? [Question 17]
	
	Export your bill to a Cloud Storage bucket, and then import into Cloud Bigtable for analysis.
 	
 	Export your bill to a Cloud Storage bucket, and then import into Google Sheets for analysis.
 	
 	Export your transactions to a local file, and perform analysis with a desktop tool.
 	
 	Export your bill to a BigQuery dataset, and then write time window-based SQL queries for analysis. [✔️]

 	-------

 	For analyzing Google Cloud Platform service costs from three separate projects and creating service cost estimates by service type, daily and monthly, for the next six months using standard query syntax, the recommended approach is:

		D. Export your bill to a BigQuery dataset, and then write time window-based SQL queries for analysis.

	Here's why:

		Export to BigQuery: Exporting your billing data to a BigQuery dataset allows you to store and analyze your billing data in a scalable and efficient way.

		Standard SQL Queries: BigQuery supports standard SQL queries, making it easy to analyze and aggregate your billing data based on different dimensions, such as service type, date, and project.

		Time Window-based SQL Queries: With BigQuery, you can easily write time window-based SQL queries to aggregate costs daily and monthly over the next six months. You can use standard SQL functions to group data, calculate sums, and perform other necessary operations.

		Scalability: BigQuery is designed to handle large datasets, making it suitable for analyzing billing data over an extended period.

		By using BigQuery, you can efficiently perform complex analyses on your billing data, gaining insights into costs by service type, daily and monthly, and making informed decisions about resource usage and cost optimization.

	-------

	Bard:

		The correct answer is Export your bill to a BigQuery dataset, and then write time window-based SQL queries for analysis.

			This approach is the most efficient and scalable method for analyzing Google Cloud Platform (GCP) service costs from multiple projects. BigQuery is a fully managed data warehouse that is optimized for large-scale data analysis, enabling you to perform complex queries and generate insights effectively.

		Option 1, exporting the bill to Cloud Bigtable, is not recommended as Bigtable is a NoSQL database designed for storing and managing large amounts of structured and semi-structured data. It's less suitable for structured analysis tasks like cost forecasting.

		Option 2, importing the bill into Google Sheets, is a less efficient option compared to using BigQuery. While Google Sheets is a spreadsheet application that can handle basic data analysis, it's not designed for handling large datasets or complex queries.

		Option 3, exporting the transactions to a local file and analyzing it with a desktop tool, offers limited scalability and flexibility. It requires manually processing the local file and using a desktop tool, which could be cumbersome for large datasets or frequent analysis updates.

		Therefore, exporting the bill to a BigQuery dataset provides the most efficient and scalable solution for analyzing GCP service costs from multiple projects. The ability to write SQL queries and utilize BigQuery's data analysis capabilities makes it the preferred choice for this task.

-------

Your company is moving its entire workload to Compute Engine. Some servers should be accessible through the Internet, and other servers should only be accessible over the internal network. All servers need to be able to talk to each other over specific ports and protocols. The current on-premises network relies on a demilitarized zone (DMZ) for the public servers and a Local Area Network (LAN) for the private servers. You need to design the networking infrastructure on Google Cloud to match these requirements. What should you do?
[Question 179]

	1. Create a single VPC with a subnet for the DMZ and a subnet for the LAN. 2. Set up firewall rules to open up relevant traffic between the DMZ and the LAN subnets, and another firewall rule to allow public ingress traffic for the DMZ. [✔️]
 	
 	1. Create a single VPC with a subnet for the DMZ and a subnet for the LAN. 2. Set up firewall rules to open up relevant traffic between the DMZ and the LAN subnets, and another firewall rule to allow public egress traffic for the DMZ.
 	
 	1. Create a VPC with a subnet for the DMZ and another VPC with a subnet for the LAN. 2. Set up firewall rules to open up relevant traffic between the DMZ and the LAN subnets, and another firewall rule to allow public ingress traffic for the DMZ.
 	
 	1. Create a VPC with a subnet for the DMZ and another VPC with a subnet for the LAN. 2. Set up firewall rules to open up relevant traffic between the DMZ and the LAN subnets, and another firewall rule to allow public egress traffic for the DMZ.

 	-------

 	The correct design for the networking infrastructure on Google Cloud to match the specified requirements involves creating a single VPC with subnets for the DMZ and the LAN. The correct answer is:

		A. 1. Create a single VPC with a subnet for the DMZ and a subnet for the LAN. 2. Set up firewall rules to open up relevant traffic between the DMZ and the LAN subnets, and another firewall rule to allow public ingress traffic for the DMZ.

	Here's why:

		Single VPC: Creating a single VPC simplifies the network architecture and allows for better communication and management of resources within the VPC.

			Subnets for DMZ and LAN: Creating separate subnets for the DMZ and the LAN helps in segregating public-facing servers from private servers. It allows you to control the flow of traffic between the two subnets.

		Firewall Rules: Setting up firewall rules is crucial for controlling traffic between different subnets. The firewall rules should allow relevant traffic between the DMZ and the LAN subnets. Additionally, another firewall rule should be created to allow public ingress traffic for the DMZ, ensuring that public-facing servers can receive external requests.

	Why Option B is Incorrect:
		
		Option B suggests allowing public egress traffic for the DMZ. Egress traffic typically refers to outgoing traffic from a network. In this context, it's not necessary to explicitly allow public egress traffic for the DMZ. The focus should be on ingress traffic for public-facing servers.

	Why Options C and D are Incorrect:
		
		Options C and D propose creating multiple VPCs for the DMZ and the LAN. While this is technically feasible, it introduces unnecessary complexity. A single VPC is sufficient for this scenario, and it simplifies the overall network design.

	In summary, Option A is the most appropriate choice for designing the networking infrastructure to match the specified requirements on Google Cloud.

	-------

	Bard:

		The correct answer is 1. Create a single VPC with a subnet for the DMZ and a subnet for the LAN. 2. Set up firewall rules to open up relevant traffic between the DMZ and the LAN subnets, and another firewall rule to allow public ingress traffic for the DMZ.

			This approach provides a secure and efficient way to replicate the on-premises network architecture on Google Cloud. By using a single VPC, you can maintain centralized network management and visibility. Subnetting the VPC into DMZ and LAN subnets allows for the separation of public and private resources, while firewall rules ensure controlled communication between them.

		Option 2, creating separate VPCs for the DMZ and LAN, introduces complexity and potential security risks. It requires managing two separate network configurations, which can be challenging to maintain and troubleshoot. Additionally, it increases the attack surface as the DMZ is directly exposed to the public internet.

		Option 3, creating firewall rules to allow public egress traffic for the DMZ, is not recommended as it opens up unnecessary exposure to the internet. Publicly accessible servers should only communicate with the internet when necessary, and the firewall should be configured to limit that traffic.

		Therefore, the recommended approach is to create a single VPC with separate subnets for the DMZ and LAN. This provides a secure and manageable network architecture that mirrors the on-premises environment while leveraging Google Cloud's scalability and flexibility.

-------

* You are managing a project for the Business Intelligence (BI) department in your company. A data pipeline ingests data into BigQuery via streaming. You want the users in the BI department to be able to run the custom SQL queries against the latest data in BigQuery. What should you do? [Question 178]
		
	1. Create a Data Studio dashboard that uses the related BigQuery tables as a source and give the BI team view access to the Data Studio dashboard.
 	
 	2. Create a Service Account for the BI team and distribute a new private key to each member of the BI team.
 	
 	3. Use Cloud Scheduler to schedule a batch Dataflow job to copy the data from BigQuery to the BI team's internal data warehouse. [Suggested]
 	
 	4. Assign the IAM role of BigQuery User to a Google Group that contains the members of the BI team. [✔️]

 	-------

 	To enable users in the BI department to run custom SQL queries against the latest data in BigQuery, you should grant them the appropriate permissions. The recommended approach is:

		D. Assign the IAM role of BigQuery User to a Google Group that contains the members of the BI team.

	Here's why:

		A. Create a Data Studio dashboard that uses the related BigQuery tables as a source and give the BI team view access to the Data Studio dashboard.

			While Data Studio dashboards can provide a visualization layer on top of BigQuery data, they might not be suitable for running custom SQL queries directly. This option provides a more limited interaction with the data.
	
		B. Create a Service Account for the BI team and distribute a new private key to each member of the BI team.

			Creating a Service Account with private keys is generally used for programmatic access. It's not the most user-friendly approach for individuals in the BI department who want to run queries interactively.
		
		C. Use Cloud Scheduler to schedule a batch Dataflow job to copy the data from BigQuery to the BI team's internal data warehouse.

			Scheduling a batch job to copy data introduces latency, and it may not provide real-time access to the latest data. It's also an unnecessary additional step if users want to directly query the data in BigQuery.
	
	Why Option D is Recommended:

		Assigning the IAM role of BigQuery User to a Google Group simplifies access management. You can add or remove users from the Google Group to control access to BigQuery.
		
		The BigQuery User role provides the necessary permissions for running custom SQL queries and accessing the data in BigQuery.
		
		It allows users in the BI department to directly interact with BigQuery through the BigQuery web UI, client libraries, or any other query tool.
	
	Conclusion:
		
		Option D is the recommended approach for granting users in the BI department the ability to run custom SQL queries against the latest data in BigQuery. It provides a straightforward and user-friendly solution while ensuring proper access control.

	-------

	Bard:

		The correct answer is 4. Assign the IAM role of BigQuery User to a Google Group that contains the members of the BI team.

			This approach provides the most secure and efficient way for BI team members to access and analyze data in BigQuery. By assigning the BigQuery User role to a Google Group, you can centrally manage access permissions and ensure that only authorized members of the BI team can access the data.

		Option 1, creating a Data Studio dashboard, is not sufficient for allowing direct SQL queries against BigQuery data. Data Studio provides visualizations and dashboards based on data sources, but it doesn't enable users to directly execute SQL queries.

		Option 2, creating a Service Account for the BI team and distributing private keys, is not recommended for sharing data access. Service Accounts are intended for automated tasks, and distributing private keys exposes sensitive credentials to unauthorized access.

		Option 3, using Cloud Scheduler to schedule a batch Dataflow job, is not necessary for BI team members to run their own SQL queries. The goal is to enable them to access and analyze the latest data in BigQuery without the need for scheduled data transfers.

		By assigning the BigQuery User role to a Google Group, you can effectively grant access to the BI team members while maintaining centralized control and security. This ensures that only authorized users can access the data and utilize SQL queries for analysis without the need for extra tools or manual processes.

-------

* You are creating an application that will run on Google Kubernetes Engine. You have identified MongoDB as the most suitable database system for your application and want to deploy a managed MongoDB environment that provides a support SLA. What should you do? [Question 177]
	
	Create a Cloud Bigtable cluster, and use the HBase API.
	
	Deploy MongoDB Atlas from the Google Cloud Marketplace. [✔️]
	
	Download a MongoDB installation package, and run it on Compute Engine instances. [Suggested]
	
	Download a MongoDB installation package, and run it on a Managed Instance Group.

	-------

	For deploying a managed MongoDB environment with a support SLA on Google Kubernetes Engine, the most appropriate option is:

		B. Deploy MongoDB Atlas from the Google Cloud Marketplace.

	Here's why:

		A. Create a Cloud Bigtable cluster, and use the HBase API.

			Cloud Bigtable is a highly scalable NoSQL database, but it's not MongoDB. Using the HBase API is not applicable for MongoDB-based applications.
		
		B. Deploy MongoDB Atlas from the Google Cloud Marketplace.

			MongoDB Atlas is a fully managed MongoDB service that provides high availability, scalability, and support SLAs. Deploying MongoDB Atlas from the Google Cloud Marketplace simplifies the setup process, and it is a well-supported solution.
		
		C. Download a MongoDB installation package, and run it on Compute Engine instances.

			While this is a viable option, it requires manual management of MongoDB instances on Compute Engine. It lacks the ease of use, automation, and support guarantees that a managed service like MongoDB Atlas provides.
		
		D. Download a MongoDB installation package, and run it on a Managed Instance Group.

			Running MongoDB on a Managed Instance Group provides some level of automation, but it lacks the advanced features and support provided by managed MongoDB services like MongoDB Atlas.
	
	Why Option B is Recommended:

		MongoDB Atlas is a fully managed MongoDB service that simplifies the operational aspects of running MongoDB.
		
		It provides features such as automated backups, scaling, and monitoring, reducing the operational burden on your part.
		
		MongoDB Atlas offers support SLAs, ensuring that you can get assistance in case of issues.
	
	Conclusion:
		
		Option B, deploying MongoDB Atlas from the Google Cloud Marketplace, is the most suitable choice for creating a managed MongoDB environment with a support SLA on Google Kubernetes Engine. It combines the benefits of a managed service with MongoDB's capabilities.

	-------

	Bard:

		The correct answer is Deploy MongoDB Atlas from the Google Cloud Marketplace.

			MongoDB Atlas is a fully managed cloud database service for MongoDB that offers several advantages over deploying MongoDB on your own infrastructure, including:

				Simplicity: 

					MongoDB Atlas takes care of provisioning, managing, and scaling your MongoDB clusters, so you can focus on developing your application.
				
				Scalability:

					MongoDB Atlas can automatically scale your clusters up or down based on your application's needs.
				
				Security:

					MongoDB Atlas provides built-in security features, such as role-based access control (RBAC) and data encryption.
				
				Support:

					MongoDB Atlas provides 24/7 support from MongoDB experts.
		
		The other options are not as suitable for running a MongoDB database for your Kubernetes application.

			Creating a Cloud Bigtable cluster and using the HBase API: 

				Cloud Bigtable is a NoSQL database that is not as well-suited for use with MongoDB applications as MongoDB Atlas.
			
			Downloading a MongoDB installation package and running it on Compute Engine instances: 

				This option is more complex and time-consuming than using MongoDB Atlas, and it does not provide the same level of scalability and security.
			
			Downloading a MongoDB installation package and running it on a Managed Instance Group: 

				This option is more efficient than running MongoDB on individual Compute Engine instances, but it does not provide the same level of scalability and security as MongoDB Atlas.
			
			Therefore, the most recommended approach is to deploy MongoDB Atlas from the Google Cloud Marketplace. This will provide you with a managed MongoDB environment that is easy to use, scalable, secure, and supported.

-------

** You will have several applications running on different Compute Engine instances in the same project. You want to specify at a more granular level the service account each instance uses when calling Google Cloud APIs. What should you do? [Question 176]
	
	When creating the instances, specify a Service Account for each instance. [✔️]
	
	When creating the instances, assign the name of each Service Account as instance metadata.
	
	After starting the instances, use gcloud compute instances update to specify a Service Account for each instance.
	[Bard and ChatGPT Suggested] [✔️]
	
	After starting the instances, use gcloud compute instances update to assign the name of the relevant Service Account as instance metadata.

	-------

	To specify at a more granular level the service account each Compute Engine instance uses when calling Google Cloud APIs, you should use:

		C. After starting the instances, use gcloud compute instances update to specify a Service Account for each instance.

	Here's why:

		A. When creating the instances, specify a Service Account for each instance.

			This option is not entirely accurate. While you can specify the service account during instance creation, it's typically set during instance creation and not adjusted afterward.
		
		B. When creating the instances, assign the name of each Service Account as instance metadata.

			This option is not the standard way to set the service account for a Compute Engine instance. Instance metadata is used for configuration settings but doesn't include direct assignment of the service account.
		
		C. After starting the instances, use gcloud compute instances update to specify a Service Account for each instance.

			This is the correct option. It allows you to modify the service account associated with a Compute Engine instance after it has been created. You can use the --service-account flag with the gcloud compute instances update command to specify the service account.
		
		D. After starting the instances, use gcloud compute instances update to assign the name of the relevant Service Account as instance metadata.

			While it's technically possible to use instance metadata for service account information, it's not a standard or recommended approach. The gcloud compute instances update command is the more appropriate way to set the service account.

	Conclusion:
		
		Option C, "After starting the instances, use gcloud compute instances update to specify a Service Account for each instance," is the correct and recommended approach for adjusting the service account associated with a Compute Engine instance after it has been created.

	-------

	Bard:

		The correct answer is After starting the instances, use gcloud compute instances update to specify a Service Account for each instance.

			This approach provides the most granular control over the service accounts used by each instance. By specifying the service account during instance updates, you can ensure that each instance has the correct permissions for the applications it runs.

		Option 1, specifying a service account when creating the instances, is not as granular as updating the service accounts after the instances have started. This is because the service account is associated with the instance throughout its lifetime, even if the application running on the instance changes.

		Option 2, assigning the name of the service account as instance metadata, is not as efficient as specifying the service account directly. This is because the instance metadata service is asynchronous, and there may be a delay before the metadata is read by the instance.

		Option 3, updating the service account after starting the instances using gcloud compute instances update, is the most granular and efficient approach. This method ensures that the service account is associated with the instance at the time it is running the application, and it does not require any additional configuration.

		Therefore, the most recommended approach is to update the service account for each instance after it has started using gcloud compute instances update. This will provide you with the most granular control over the service accounts used by your applications and ensure that your instances have the correct permissions for the tasks they perform.

-------

You have developed an application that consists of multiple microservices, with each microservice packaged in its own Docker container image. You want to deploy the entire application on Google Kubernetes Engine so that each microservice can be scaled individually. What should you do? [Question 175]
	
	Create and deploy a Custom Resource Definition per microservice.
	
	Create and deploy a Docker Compose File.
	
	Create and deploy a Job per microservice.
	
	Create and deploy a Deployment per microservice. [✔️]

	-------

	To deploy an application consisting of multiple microservices, each packaged in its own Docker container image, on Google Kubernetes Engine (GKE) with the ability to scale each microservice individually, you should:

		D. Create and deploy a Deployment per microservice.

	Here's why:

		A. Create and deploy a Custom Resource Definition per microservice.

			Custom Resource Definitions (CRDs) are used for extending the Kubernetes API. While you can use CRDs for custom resources, they are not the primary mechanism for deploying and managing microservices.
		
		B. Create and deploy a Docker Compose File.

			Docker Compose is typically used for defining and running multi-container Docker applications, but it's not the primary tool for managing deployments on Kubernetes. GKE uses Kubernetes manifests like Deployments to define and manage application resources.
		
		C. Create and deploy a Job per microservice.

			Jobs are designed for running short-lived tasks, not for deploying and managing long-running microservices. Deployments are better suited for managing microservices in a scalable and resilient manner.
	
	Why Option D is Recommended:

		Deployments in Kubernetes are designed to manage the deployment and scaling of applications, including microservices.
		
		Deployments provide features like rolling updates, scaling, and rollback, making them suitable for managing the lifecycle of microservices.
		
		Each microservice can be independently deployed, scaled, and updated by creating a separate Deployment for each microservice.

	Conclusion:
		
		Option D, "Create and deploy a Deployment per microservice," is the recommended approach for deploying an application with multiple microservices on Google Kubernetes Engine. It allows you to manage each microservice independently and provides the necessary features for scaling and updating microservices.

	-------

	Bard:

		The correct answer is Create and deploy a Deployment per microservice.

			This approach provides the most scalable and flexible way to deploy microservices on Google Kubernetes Engine (GKE). Deployments are a core abstraction in Kubernetes that manage the lifecycle of pods, the basic unit of deployment in Kubernetes. By creating a Deployment per microservice, you can independently scale each microservice up or down based on its workload.

		Option 1, creating and deploying a Custom Resource Definition (CRD) per microservice, is not as flexible as using Deployments. CRDs are more complex to manage and can be less efficient for scaling individual microservices.

		Option 2, creating and deploying a Docker Compose file, is not a native Kubernetes resource and does not leverage the full capabilities of Kubernetes for managing microservices. It offers less control and flexibility compared to Deployments.

		Option 3, creating and deploying a Job per microservice, is not suitable for long-running microservices. Jobs are designed for short-lived tasks, such as batch processing or data ingestion. For long-running microservices, Deployments provide a more appropriate and scalable solution.

		Therefore, creating and deploying a Deployment per microservice is the most recommended approach for deploying microservices on GKE. This approach ensures that each microservice can be scaled independently, managed effectively, and utilizes the full capabilities of Kubernetes for microservice orchestration.

-------

* You are creating an application that will run on Google Kubernetes Engine. You have identified MongoDB as the most suitable database system for your application and want to deploy a managed MongoDB environment that provides a support SLA. What should you do? [Question 177]
	
	Create a Cloud Bigtable cluster, and use the HBase API.
	
	Deploy MongoDB Atlas from the Google Cloud Marketplace. [✔️]
	
	Download a MongoDB installation package, and run it on Compute Engine instances. [Suggested]
	
	Download a MongoDB installation package, and run it on a Managed Instance Group.

	-------

	For deploying a managed MongoDB environment with a support SLA on Google Kubernetes Engine, the most appropriate option is:

		B. Deploy MongoDB Atlas from the Google Cloud Marketplace.

	Here's why:

		A. Create a Cloud Bigtable cluster, and use the HBase API.

			Cloud Bigtable is a highly scalable NoSQL database, but it's not MongoDB. Using the HBase API is not applicable for MongoDB-based applications.
		
		B. Deploy MongoDB Atlas from the Google Cloud Marketplace.

			MongoDB Atlas is a fully managed MongoDB service that provides high availability, scalability, and support SLAs. Deploying MongoDB Atlas from the Google Cloud Marketplace simplifies the setup process, and it is a well-supported solution.
		
		C. Download a MongoDB installation package, and run it on Compute Engine instances.

			While this is a viable option, it requires manual management of MongoDB instances on Compute Engine. It lacks the ease of use, automation, and support guarantees that a managed service like MongoDB Atlas provides.
		
		D. Download a MongoDB installation package, and run it on a Managed Instance Group.

			Running MongoDB on a Managed Instance Group provides some level of automation, but it lacks the advanced features and support provided by managed MongoDB services like MongoDB Atlas.

	Why Option B is Recommended:

		MongoDB Atlas is a fully managed MongoDB service that simplifies the operational aspects of running MongoDB.
		
		It provides features such as automated backups, scaling, and monitoring, reducing the operational burden on your part.
		
		MongoDB Atlas offers support SLAs, ensuring that you can get assistance in case of issues.

	Conclusion:
		
		Option B, deploying MongoDB Atlas from the Google Cloud Marketplace, is the most suitable choice for creating a managed MongoDB environment with a support SLA on Google Kubernetes Engine. It combines the benefits of a managed service with MongoDB's capabilities.

	-------

	Bard:

		The correct answer is Deploy MongoDB Atlas from the Google Cloud Marketplace.

			MongoDB Atlas is a fully managed cloud database service for MongoDB that offers several advantages over deploying MongoDB on your own infrastructure, including:

				Simplicity: 

					MongoDB Atlas takes care of provisioning, managing, and scaling your MongoDB clusters, so you can focus on developing your application.
				
				Scalability:

					MongoDB Atlas can automatically scale your clusters up or down based on your application's needs.
				
				Security:

					MongoDB Atlas provides built-in security features, such as role-based access control (RBAC) and data encryption.
				
				Support:

					MongoDB Atlas provides 24/7 support from MongoDB experts.
		
		The other options are not as suitable for running a MongoDB database for your Kubernetes application.

			Creating a Cloud Bigtable cluster and using the HBase API: 

				Cloud Bigtable is a NoSQL database that is not as well-suited for use with MongoDB applications as MongoDB Atlas.
			
			Downloading a MongoDB installation package and running it on Compute Engine instances: 

				This option is more complex and time-consuming than using MongoDB Atlas, and it does not provide the same level of scalability and security.
			
			Downloading a MongoDB installation package and running it on a Managed Instance Group: 

				This option is more efficient than running MongoDB on individual Compute Engine instances, but it does not provide the same level of scalability and security as MongoDB Atlas.
			
			Therefore, the most recommended approach is to deploy MongoDB Atlas from the Google Cloud Marketplace. This will provide you with a managed MongoDB environment that is easy to use, scalable, secure, and supported.

-------

* You will have several applications running on different Compute Engine instances in the same project. You want to specify at a more granular level the service account each instance uses when calling Google Cloud APIs. What should you do? [Question 176]
	
	When creating the instances, specify a Service Account for each instance. [✔️]
	
	When creating the instances, assign the name of each Service Account as instance metadata.
	
	After starting the instances, use gcloud compute instances update to specify a Service Account for each instance.
	[Bard and ChatGPT Suggested] [✔️]
	
	After starting the instances, use gcloud compute instances update to assign the name of the relevant Service Account as instance metadata.

	-------

	To specify at a more granular level the service account each Compute Engine instance uses when calling Google Cloud APIs, you should use:

		C. After starting the instances, use gcloud compute instances update to specify a Service Account for each instance.

	Here's why:

		A. When creating the instances, specify a Service Account for each instance.

			This option is not entirely accurate. While you can specify the service account during instance creation, it's typically set during instance creation and not adjusted afterward.
		
		B. When creating the instances, assign the name of each Service Account as instance metadata.

			This option is not the standard way to set the service account for a Compute Engine instance. Instance metadata is used for configuration settings but doesn't include direct assignment of the service account.
		
		C. After starting the instances, use gcloud compute instances update to specify a Service Account for each instance.

			This is the correct option. It allows you to modify the service account associated with a Compute Engine instance after it has been created. You can use the --service-account flag with the gcloud compute instances update command to specify the service account.
		
		D. After starting the instances, use gcloud compute instances update to assign the name of the relevant Service Account as instance metadata.

			While it's technically possible to use instance metadata for service account information, it's not a standard or recommended approach. The gcloud compute instances update command is the more appropriate way to set the service account.

	Conclusion:
		
		Option C, "After starting the instances, use gcloud compute instances update to specify a Service Account for each instance," is the correct and recommended approach for adjusting the service account associated with a Compute Engine instance after it has been created.

	-------

	Bard:

		The correct answer is After starting the instances, use gcloud compute instances update to specify a Service Account for each instance.

			This approach provides the most granular control over the service accounts used by each instance. By specifying the service account during instance updates, you can ensure that each instance has the correct permissions for the applications it runs.

		Option 1, specifying a service account when creating the instances, is not as granular as updating the service accounts after the instances have started. This is because the service account is associated with the instance throughout its lifetime, even if the application running on the instance changes.

		Option 2, assigning the name of the service account as instance metadata, is not as efficient as specifying the service account directly. This is because the instance metadata service is asynchronous, and there may be a delay before the metadata is read by the instance.

		Option 3, updating the service account after starting the instances using gcloud compute instances update, is the most granular and efficient approach. This method ensures that the service account is associated with the instance at the time it is running the application, and it does not require any additional configuration.

		Therefore, the most recommended approach is to update the service account for each instance after it has started using gcloud compute instances update. This will provide you with the most granular control over the service accounts used by your applications and ensure that your instances have the correct permissions for the tasks they perform.

-------

You have developed an application that consists of multiple microservices, with each microservice packaged in its own Docker container image. You want to deploy the entire application on Google Kubernetes Engine so that each microservice can be scaled individually. What should you do? [Question 175]
	
	Create and deploy a Custom Resource Definition per microservice.
	
	Create and deploy a Docker Compose File.
	
	Create and deploy a Job per microservice.
	
	Create and deploy a Deployment per microservice. [✔️]

	-------

	To deploy an application consisting of multiple microservices, each packaged in its own Docker container image, on Google Kubernetes Engine (GKE) with the ability to scale each microservice individually, you should:

		D. Create and deploy a Deployment per microservice.

	Here's why:

		A. Create and deploy a Custom Resource Definition per microservice.

			Custom Resource Definitions (CRDs) are used for extending the Kubernetes API. While you can use CRDs for custom resources, they are not the primary mechanism for deploying and managing microservices.
		
		B. Create and deploy a Docker Compose File.

			Docker Compose is typically used for defining and running multi-container Docker applications, but it's not the primary tool for managing deployments on Kubernetes. GKE uses Kubernetes manifests like Deployments to define and manage application resources.
		
		C. Create and deploy a Job per microservice.

			Jobs are designed for running short-lived tasks, not for deploying and managing long-running microservices. Deployments are better suited for managing microservices in a scalable and resilient manner.
	
	Why Option D is Recommended:

		Deployments in Kubernetes are designed to manage the deployment and scaling of applications, including microservices.
		
		Deployments provide features like rolling updates, scaling, and rollback, making them suitable for managing the lifecycle of microservices.
		
		Each microservice can be independently deployed, scaled, and updated by creating a separate Deployment for each microservice.

	Conclusion:
		
		Option D, "Create and deploy a Deployment per microservice," is the recommended approach for deploying an application with multiple microservices on Google Kubernetes Engine. It allows you to manage each microservice independently and provides the necessary features for scaling and updating microservices.

	-------

	Bard:

		The correct answer is Create and deploy a Deployment per microservice.

			This approach provides the most scalable and flexible way to deploy microservices on Google Kubernetes Engine (GKE). Deployments are a core abstraction in Kubernetes that manage the lifecycle of pods, the basic unit of deployment in Kubernetes. By creating a Deployment per microservice, you can independently scale each microservice up or down based on its workload.

		Option 1, creating and deploying a Custom Resource Definition (CRD) per microservice, is not as flexible as using Deployments. CRDs are more complex to manage and can be less efficient for scaling individual microservices.

		Option 2, creating and deploying a Docker Compose file, is not a native Kubernetes resource and does not leverage the full capabilities of Kubernetes for managing microservices. It offers less control and flexibility compared to Deployments.

		Option 3, creating and deploying a Job per microservice, is not suitable for long-running microservices. Jobs are designed for short-lived tasks, such as batch processing or data ingestion. For long-running microservices, Deployments provide a more appropriate and scalable solution.

		Therefore, creating and deploying a Deployment per microservice is the most recommended approach for deploying microservices on GKE. This approach ensures that each microservice can be scaled independently, managed effectively, and utilizes the full capabilities of Kubernetes for microservice orchestration.

-------

* You are about to deploy a new Enterprise Resource Planning (ERP) system on Google Cloud. The application holds the full database in-memory for fast data access, and you need to configure the most appropriate resources on Google Cloud for this application. What should you do? [Question 174]
	
	Provision preemptible Compute Engine instances.
	
	Provision Compute Engine instances with GPUs attached.
	
	Provision Compute Engine instances with local SSDs attached. [Suggested and ChatGPT Suggested]
	
	Provision Compute Engine instances with M1 machine type. [✔️]

	-------

	For an Enterprise Resource Planning (ERP) system that holds the full database in-memory for fast data access on Google Cloud, the most appropriate resource configuration would be:

		C. Provision Compute Engine instances with local SSDs attached.

	Here's why:

		A. Provision preemptible Compute Engine instances.

			Preemptible instances are cost-effective but are suitable for stateless, fault-tolerant workloads. Since an ERP system involves critical data, using preemptible instances might result in data loss if the instances are preempted.
	
		B. Provision Compute Engine instances with GPUs attached.

			GPUs are used for accelerating specific workloads, such as machine learning or graphics processing. For an ERP system focused on in-memory data access, GPUs may not provide significant benefits and could be an unnecessary cost.
		
		C. Provision Compute Engine instances with local SSDs attached.

			Local SSDs provide high-performance, low-latency storage that is ideal for applications requiring fast data access. Since the ERP system holds the full database in-memory, using local SSDs can complement the in-memory processing and enhance overall performance.
		
		D. Provision Compute Engine instances with M1 machine type.

			The machine type (M1, M2, etc.) specifies the virtualized hardware resources of the host machine. While machine type is an important consideration, the choice of local SSDs for storage is more critical for an ERP system with in-memory database requirements.
	
	Why Option C is Recommended:

		Local SSDs are directly attached to the physical machine and provide low-latency, high-IOPS storage.
		
		The ERP system's requirement for in-memory data access can be complemented by fast storage access, making local SSDs an appropriate choice.
		
		While local SSDs are ephemeral (data is lost if the instance is deleted or preempted), the ERP system's data integrity can be maintained through appropriate database replication or backup strategies.
	
	Conclusion:
		
		Option C, "Provision Compute Engine instances with local SSDs attached," is the most suitable choice for configuring resources on Google Cloud for an ERP system that holds the full database in-memory. It provides the necessary performance characteristics for fast data access.

-------

You are developing a financial trading application that will be used globally. Data is stored and queried using a relational structure, and clients from all over the world should get the exact identical state of the data. The application will be deployed in multiple regions to provide the lowest latency to end users. You need to select a storage option for the application data while minimizing latency. What should you do?
[Question 173]
	
	Use Cloud Bigtable for data storage.
	
	Use Cloud SQL for data storage.
	
	Use Cloud Spanner for data storage. [✔️]
	
	Use Firestore for data storage.

	-------

	For a financial trading application that requires a global deployment, relational data storage, and the need for clients worldwide to access the exact identical state of the data with minimal latency, the most suitable option would be:

		C. Use Cloud Spanner for data storage.

	Here's why:

		A. Use Cloud Bigtable for data storage.

			Cloud Bigtable is a NoSQL database optimized for large analytical and operational workloads, but it may not be the best fit for relational data and the requirement for clients to access the exact identical state of the data.
		
		B. Use Cloud SQL for data storage.

			While Cloud SQL provides a managed relational database service, its global distribution may result in higher latencies due to data replication delays. It may not provide the low-latency access required for a global financial trading application.
		
		C. Use Cloud Spanner for data storage.

			Cloud Spanner is a globally distributed, strongly consistent, and horizontally scalable database that supports both relational and NoSQL data models. It provides low-latency access to data across multiple regions while ensuring strong consistency, making it suitable for financial applications requiring global access to the same state of data.
		
		D. Use Firestore for data storage.

			Firestore is a NoSQL database that is optimized for mobile and web applications. While it supports global distribution, its focus is on providing real-time updates for client applications, and it may not be the best fit for complex financial trading applications with relational data and specific consistency requirements.
	
	Why Option C is Recommended:

		Cloud Spanner provides globally distributed, strongly consistent transactions with low-latency access to data.
		
		It supports a relational data model, making it suitable for applications that rely on a structured and relational database schema.
		
		Cloud Spanner is designed to provide a consistent and up-to-date view of data across multiple regions, meeting the requirements of a global financial trading application.
	
	Conclusion:
		
		Option C, "Use Cloud Spanner for data storage," is the most suitable choice for a financial trading application with global deployment, relational data storage, and the need for low-latency access to the exact identical state of the data.

-------

* You are monitoring an application and receive user feedback that a specific error is spiking. You notice that the error is caused by a Service Account having insufficient permissions. You are able to solve the problem but want to be notified if the problem recurs. What should you do? [Question 172]
	
	In the Log Viewer, filter the logs on severity ˜Error' and the name of the Service Account. [Suggested]
	
	Create a sink to BigQuery to export all the logs. Create a Data Studio dashboard on the exported logs.
	
	Create a custom log-based metric for the specific error to be used in an Alerting Policy. [✔️]
	
	Grant Project Owner access to the Service Account.

	-------

	For monitoring and receiving notifications about a specific error caused by a Service Account having insufficient permissions, the most appropriate option is:

		C. Create a custom log-based metric for the specific error to be used in an Alerting Policy.

	Here's why:

		A. In the Log Viewer, filter the logs on severity 'Error' and the name of the Service Account.

			While filtering logs in the Log Viewer can help identify specific errors, it doesn't provide an automated alerting mechanism to notify you when the problem recurs.
		
		B. Create a sink to BigQuery to export all the logs. Create a Data Studio dashboard on the exported logs.

			This option involves exporting logs to BigQuery and creating a dashboard, which is more focused on analysis and reporting. It doesn't address the need for real-time alerts when the specific error occurs.
		
		C. Create a custom log-based metric for the specific error to be used in an Alerting Policy.

			This is the correct option. By creating a custom log-based metric for the specific error, you can use it as a condition in an Alerting Policy. This allows you to receive notifications when the error occurs, providing a proactive approach to issue resolution.
		
		D. Grant Project Owner access to the Service Account.

			Granting Project Owner access to the Service Account is not a recommended solution, as it provides excessive permissions and poses security risks. It's better to follow the principle of least privilege and use proper monitoring and alerting mechanisms.
	
	Why Option C is Recommended:

		Creating a custom log-based metric allows you to define specific conditions related to the error you are monitoring.
		
		You can then use this metric as a trigger in an Alerting Policy to receive real-time notifications when the error occurs.
		
		This approach provides a proactive way to address the issue and prevents the need for constant manual monitoring.
	
	Conclusion:
		
		Option C, "Create a custom log-based metric for the specific error to be used in an Alerting Policy," is the most suitable choice for monitoring and receiving notifications about a specific error related to Service Account permissions.

-------

** You are working with a Cloud SQL MySQL database at your company. You need to retain a month-end copy of the database for three years for audit purposes. What should you do? [Question 171]
	
	Set up an export job for the first of the month. Write the export file to an Archive class Cloud Storage bucket. [✔️]
	
	Save the automatic first-of-the-month backup for three years. Store the backup file in an Archive class Cloud Storage bucket. [Suggested and ChatGPT Suggested]
	
	Set up an on-demand backup for the first of the month. Write the backup to an Archive class Cloud Storage bucket.
	
	Convert the automatic first-of-the-month backup to an export file. Write the export file to a Coldline class Cloud Storage bucket.

	-------

	For retaining a month-end copy of a Cloud SQL MySQL database for three years for audit purposes, the most appropriate option is:

		B. Save the automatic first-of-the-month backup for three years. Store the backup file in an Archive class Cloud Storage bucket.

	Here's why:

		A. Set up an export job for the first of the month. Write the export file to an Archive class Cloud Storage bucket.

			While export jobs can be used to create backups, it's more suitable for exporting data rather than for long-term retention and management of database backups.

		B. Save the automatic first-of-the-month backup for three years. Store the backup file in an Archive class Cloud Storage bucket.

			This is the correct option. Cloud SQL provides automatic backups, and you can configure it to take backups at specific intervals, such as the first of the month. Storing these backups in an Archive class Cloud Storage bucket is cost-effective for long-term retention.
		
		C. Set up an on-demand backup for the first of the month. Write the backup to an Archive class Cloud Storage bucket.

			On-demand backups can be created, but the automatic backups are more convenient for this scenario. Storing them in an Archive class bucket is a good practice for cost savings.
		
		D. Convert the automatic first-of-the-month backup to an export file. Write the export file to a Coldline class Cloud Storage bucket.

			Coldline class storage is designed for infrequently accessed data, and exporting/importing data regularly may not be the most efficient or cost-effective solution for long-term retention.
		
	Why Option B is Recommended:

		Automatic backups provided by Cloud SQL are convenient and can be scheduled, such as on the first of the month.
		
		Storing these backups in an Archive class Cloud Storage bucket is cost-effective for long-term retention, especially when considering a three-year audit requirement.
	
	Conclusion:
		
		Option B, "Save the automatic first-of-the-month backup for three years. Store the backup file in an Archive class Cloud Storage bucket," is the most suitable choice for retaining a month-end copy of a Cloud SQL MySQL database for three years for audit purposes.

-------

* You received a JSON file that contained a private key of a Service Account in order to get access to several resources in a Google Cloud project. You downloaded and installed the Cloud SDK and want to use this private key for authentication and authorization when performing gcloud commands. What should you do? [Question 170]
	
	Use the command gcloud auth login and point it to the private key.
	
	Use the command gcloud auth activate-service-account and point it to the private key. [✔️ and ChatGPT Suggested]
	
	Place the private key file in the installation directory of the Cloud SDK and rename it to credentials.json.
	
	Place the private key file in your home directory and rename it to GOOGLE_APPLICATION_CREDENTIALS.
	[ChatGPT Suggested]

-------

* Your auditor wants to view your organization's use of data in Google Cloud. The auditor is most interested in auditing who accessed data in Cloud Storage buckets. You need to help the auditor access the data they need. What should you do? [Question 169]
	
	Turn on Data Access Logs for the buckets they want to audit, and then build a query in the log viewer that filters on Cloud Storage. [✔️]
	
	Assign the appropriate permissions, and then create a Data Studio report on Admin Activity Audit Logs.
	
	Assign the appropriate permissions, and the use Cloud Monitoring to review metrics.

	Use the export logs API to provide the Admin Activity Audit Logs in the format they want. [Suggested]

	-------

	To help the auditor access the data they need, the most appropriate option is:

		Turn on Data Access Logs for the buckets they want to audit, and then build a query in the log viewer that filters on Cloud Storage.

	Here's why:

		Assign the appropriate permissions, and then create a Data Studio report on Admin Activity Audit Logs.

			Admin Activity Audit Logs primarily focus on actions related to changes in the configuration and settings of Google Cloud resources. It might not provide the detailed information about data access in Cloud Storage that the auditor is specifically interested in.
		
			Assign the appropriate permissions, and then use Cloud Monitoring to review metrics.

			Cloud Monitoring is more focused on monitoring and alerting based on metrics, and it might not provide the detailed data access information that Data Access Logs can offer.
		
			Use the export logs API to provide the Admin Activity Audit Logs in the format they want.

			Exporting logs via API can be done, but this might involve additional steps for the auditor, and the Admin Activity Audit Logs may not contain the granular details about data access in Cloud Storage.
		
	Why Option is Recommended:

		Turning on Data Access Logs for Cloud Storage buckets allows logging of detailed information about who accessed the data, including the identity of the user, the action performed, and the object affected.
		
		Building a query in the log viewer with the appropriate filters allows the auditor to extract the specific data access information they need.
	
	Conclusion:
		
		Option A, "Turn on Data Access Logs for the buckets they want to audit, and then build a query in the log viewer that filters on Cloud Storage," is the most suitable choice for providing the auditor with detailed information about who accessed data in Cloud Storage buckets.

-------

Your company developed a mobile game that is deployed on Google Cloud. Gamers are connecting to the game with their personal phones over the Internet. The game sends UDP packets to update the servers about the gamers' actions while they are playing in multiplayer mode. Your game backend can scale over multiple Virtual Machines (VMs), and you want to expose the VMs over a single IP address. What should you do?
[Question 167]
	
	Configure an SSL Proxy load balancer in front of the application servers.
	
	Configure an Internal UDP load balancer in front of the application servers.
	
	Configure an External HTTP(s) load balancer in front of the application servers.
	
	Configure an External Network load balancer in front of the application servers. [✔️]

	-------

	For exposing the game backend over a single IP address, handling UDP packets, and scaling over multiple virtual machines (VMs), the most suitable option is:

		D. Configure an External Network load balancer in front of the application servers.

	Here's why:

		A. Configure an SSL Proxy load balancer in front of the application servers.

			SSL Proxy load balancers are designed for handling HTTPS traffic, and they operate at the application layer. They are not suitable for UDP traffic or non-HTTP protocols like those used in gaming applications.
		
		B. Configure an Internal UDP load balancer in front of the application servers.

			Internal UDP load balancers are used for internal communication within a Virtual Private Cloud (VPC). Since gamers are connecting over the Internet, an external load balancer is more appropriate.
		
		C. Configure an External HTTP(s) load balancer in front of the application servers.

			HTTP(s) load balancers are designed for HTTP/HTTPS traffic and are not suitable for handling UDP packets common in gaming applications.
		
		D. Configure an External Network load balancer in front of the application servers.

			This is the correct option. Network load balancers operate at the transport layer (Layer 4) and can handle UDP traffic. They provide a simple and effective way to distribute UDP packets across multiple backend servers, allowing the game backend to scale horizontally.
		
	Why Option D is Recommended:

		Network load balancers operate at the transport layer, making them suitable for handling UDP traffic.
		
		They provide a single IP address for external access and distribute UDP packets across multiple backend servers, supporting scalability.
	
	Conclusion:
		
		Option D, "Configure an External Network load balancer in front of the application servers," is the most suitable choice for exposing the game backend over a single IP address and handling UDP traffic in a scalable manner.

-------

* Your web application has been running successfully on Cloud Run for Anthos. You want to evaluate an updated version of the application with a specific percentage of your production users (canary deployment). What should you do? [Question 166]
	
	Create a new service with the new version of the application. Split traffic between this version and the version that is currently running. [Suggested]
	
	Create a new revision with the new version of the application. Split traffic between this version and the version that is currently running. [✔️]
	
	Create a new service with the new version of the application. Add HTTP Load Balancer in front of both services.
	
	Create a new revision with the new version of the application. Add HTTP Load Balancer in front of both revisions.

	-------

	For canary deployment on Cloud Run for Anthos, the most appropriate option is:

		B. Create a new revision with the new version of the application. Split traffic between this version and the version that is currently running.

	Here's why:

		A. Create a new service with the new version of the application. Split traffic between this version and the version that is currently running.

			In Cloud Run for Anthos, revisions are used to manage versions of your services. Creating a new revision with the new version and splitting traffic is more appropriate than creating a completely new service.
		
		B. Create a new revision with the new version of the application. Split traffic between this version and the version that is currently running.

			This is the correct option. It allows you to create a new revision of the existing service with the updated version and then gradually split traffic between the old and new revisions to perform a canary deployment.
		
		C. Create a new service with the new version of the application. Add an HTTP Load Balancer in front of both services.

			While using an HTTP Load Balancer can be part of a deployment strategy, creating a new service for canary deployment is not the standard practice in Cloud Run for Anthos.
		
		D. Create a new revision with the new version of the application. Add an HTTP Load Balancer in front of both revisions.

			Using an HTTP Load Balancer in front of both revisions is an option, but creating a new service is unnecessary. Revisions within the same service can be used for versioning and canary deployment.
		
	Why Option B is Recommended:

		Creating a new revision within the existing service allows for versioning and canary deployment.
		
		Splitting traffic between revisions provides a controlled rollout to a percentage of users, facilitating testing and monitoring.
	
	Conclusion:
		
		Option B, "Create a new revision with the new version of the application. Split traffic between this version and the version that is currently running," is the most suitable choice for canary deployment on Cloud Run for Anthos.

-------

You are running a data warehouse on BigQuery. A partner company is offering a recommendation engine based on the data in your data warehouse. The partner company is also running their application on Google Cloud. They manage the resources in their own project, but they need access to the BigQuery dataset in your project. You want to provide the partner company with access to the dataset. What should you do?
[Question 165]
	
	Create a Service Account in your own project, and grant this Service Account access to BigQuery in your project.
	
	Create a Service Account in your own project, and ask the partner to grant this Service Account access to BigQuery in their project.
	
	Ask the partner to create a Service Account in their project, and have them give the Service Account access to BigQuery in their project.
	
	Ask the partner to create a Service Account in their project, and grant their Service Account access to the BigQuery dataset in your project. [✔️]

	-------

	To provide the partner company with access to the BigQuery dataset in your project, the recommended option is:

		D. Ask the partner to create a Service Account in their project, and grant their Service Account access to the BigQuery dataset in your project.

	Here's why:

		A. Create a Service Account in your own project, and grant this Service Account access to BigQuery in your project.

			This option would give the Service Account in your project access to BigQuery, but you want to grant access to the partner company's application, which is managed in their project.
		
		B. Create a Service Account in your own project, and ask the partner to grant this Service Account access to BigQuery in their project.

			The partner company should have control over the service accounts in their project, and granting access should be performed on their end.
		
		C. Ask the partner to create a Service Account in their project, and have them give the Service Account access to BigQuery in their project.

			This option is close, but you want to provide access to your BigQuery dataset, which requires actions on your side, not the partner's.
		
		D. Ask the partner to create a Service Account in their project, and grant their Service Account access to the BigQuery dataset in your project.

			This is the recommended option. It allows the partner company to have control over their service accounts and grant access to the specific dataset in your project.
		
	Why Option D is Recommended:

		The partner company should have control over the service accounts in their project.
		
		Granting access to the BigQuery dataset in your project should be performed by the partner company, and they can do so by creating a service account in their project.

	Conclusion:
	
		Option D, "Ask the partner to create a Service Account in their project, and grant their Service Account access to the BigQuery dataset in your project," is the most suitable choice for providing access to the BigQuery dataset in your project to the partner company.

-------

You have experimented with Google Cloud using your own credit card and expensed the costs to your company. Your company wants to streamline the billing process and charge the costs of your projects to their monthly invoice. What should you do? [Question 164]
	
	Grant the financial team the IAM role of Billing Account User on the billing account linked to your credit card.
	
	Set up BigQuery billing export and grant your financial department IAM access to query the data.
	
	Create a ticket with Google Billing Support to ask them to send the invoice to your company.
	
	Change the billing account of your projects to the billing account of your company. [✔️]

	-------

	To streamline the billing process and charge the costs of your projects to your company's monthly invoice, you should:

		D. Change the billing account of your projects to the billing account of your company.

	Here's why:

		A. Grant the financial team the IAM role of "Billing Account User" on the billing account linked to your credit card.

			This grants permissions to view and associate projects with the billing account but doesn't change the billing account itself. To centralize billing, you need to move the projects to the company's billing account.
		
		B. Set up BigQuery billing export and grant your financial department IAM access to query the data.

			BigQuery billing export is for analyzing billing data and not for changing the billing account associated with projects.
		
		C. Create a ticket with Google Billing Support to ask them to send the invoice to your company.

			Google Billing Support doesn't typically handle changing the billing account for individual projects. It's more focused on addressing billing-related issues and queries.
		
		D. Change the billing account of your projects to the billing account of your company.

			This is the correct option. By associating your projects with your company's billing account, all costs incurred by the projects will be charged to your company's monthly invoice.
		
		Why Option D is Recommended:

			Changing the billing account of your projects ensures that the costs are billed to the company's account, streamlining the billing process.
			
			It is the standard and recommended procedure for associating projects with a specific billing account.
		
	Conclusion:
		
		Option D, "Change the billing account of your projects to the billing account of your company," is the most appropriate choice for streamlining the billing process and charging the costs of your projects to your company's monthly invoice.

-------

* You have developed a containerized web application that will serve internal colleagues during business hours. You want to ensure that no costs are incurred outside of the hours the application is used. You have just created a new Google Cloud project and want to deploy the application. What should you do?
[Question 163]
	
	Deploy the container on Cloud Run for Anthos, and set the minimum number of instances to zero.
	
	Deploy the container on Cloud Run (fully managed), and set the minimum number of instances to zero. [✔️]
	
	Deploy the container on App Engine flexible environment with autoscaling, and set the value min_instances to zero in the app.yaml. [Suggested]
	
	Deploy the container on App Engine flexible environment with manual scaling, and set the value instances to zero in the app.yaml.

	-------

	To ensure that no costs are incurred outside of the hours the application is used in a new Google Cloud project, the recommended option is:

		B. Deploy the container on Cloud Run (fully managed), and set the minimum number of instances to zero.

	Here's why:

		A. Deploy the container on Cloud Run for Anthos, and set the minimum number of instances to zero.

			Cloud Run for Anthos is designed for Kubernetes-based applications and might introduce unnecessary complexity for a simple scenario. Cloud Run (fully managed) is more suitable for stateless, containerized applications.
		
		B. Deploy the container on Cloud Run (fully managed), and set the minimum number of instances to zero.

			This is the correct option. Cloud Run (fully managed) allows automatic scaling down to zero when there is no traffic, minimizing costs during idle periods.
		
		C. Deploy the container on App Engine flexible environment with autoscaling, and set the value min_instances to zero in the app.yaml.

			While App Engine flexible environment supports scaling down to zero, Cloud Run (fully managed) is a more lightweight and efficient option for containerized applications.
		
		D. Deploy the container on App Engine flexible environment with manual scaling, and set the value instances to zero in the app.yaml.

			Manual scaling in App Engine flexible environment requires at least one instance to be running, and setting the value to zero would not be suitable for cost optimization during idle periods.
	
	Why Option B is Recommended:

		Cloud Run (fully managed) is designed for stateless, containerized applications with automatic scaling based on demand.
		
		Setting the minimum number of instances to zero allows the platform to scale down to zero during idle periods, minimizing costs.
	
	Conclusion:
		
		Option B, "Deploy the container on Cloud Run (fully managed), and set the minimum number of instances to zero," is the most suitable choice for ensuring no costs are incurred outside of the hours the application is used.

-------

* Your company has embraced a hybrid cloud strategy where some of the applications are deployed on Google Cloud. A Virtual Private Network (VPN) tunnel connects your Virtual Private Cloud (VPC) in Google Cloud with your company's on-premises network. Multiple applications in Google Cloud need to connect to an on-premises database server, and you want to avoid having to change the IP configuration in all of your applications when the IP of the database changes. What should you do? [Question 162]
	
	Configure Cloud NAT for all subnets of your VPC to be used when egressing from the VM instances.
	[Suggested]
	
	Create a private zone on Cloud DNS, and configure the applications with the DNS name. [✔️]
	
	Configure the IP of the database as custom metadata for each instance, and query the metadata server.
	
	Query the Compute Engine internal DNS from the applications to retrieve the IP of the database.

	-------

	To avoid having to change the IP configuration in all of your applications when the IP of the database changes, the recommended option is:

		B. Create a private zone on Cloud DNS, and configure the applications with the DNS name.

	Here's why:

		A. Configure Cloud NAT for all subnets of your VPC to be used when egressing from the VM instances.

			Cloud NAT is used for outbound traffic, and it doesn't address the issue of dynamic IP changes for the on-premises database server.
		
		B. Create a private zone on Cloud DNS, and configure the applications with the DNS name.

			This is the correct option. Using a DNS name allows you to abstract the IP address, and when the IP of the database changes, you only need to update the DNS record without modifying the application configurations.
		
		C. Configure the IP of the database as custom metadata for each instance, and query the metadata server.

			Storing the IP as custom metadata for each instance is not a scalable solution and could lead to configuration management challenges.
		
		D. Query the Compute Engine internal DNS from the applications to retrieve the IP of the database.

			This is a viable option, but using Cloud DNS allows for a more centralized and managed approach to DNS resolution.
	
	Why Option B is Recommended:

		Creating a private zone on Cloud DNS provides a centralized and scalable way to manage DNS records for internal services.
		
		Using a DNS name in the application configurations abstracts the IP address, making it easier to update when the IP of the database changes.
	
	Conclusion:
		
		Option B, "Create a private zone on Cloud DNS, and configure the applications with the DNS name," is the most suitable choice for avoiding the need to change the IP configuration in all applications when the IP of the database changes.

-------

You are performing a monthly security check of your Google Cloud environment and want to know who has access to view data stored in your Google Cloud Project. What should you? [Question 161]
	
	Enable Audit Logs for all APIs that are related to data storage.
	
	Review the IAM permissions for any role that allows for data access. [✔️]
	
	Review the Identity-Aware Proxy settings for each resource.
	
	Create a Data Loss Prevention job.

	-------

	To identify who has access to view data stored in your Google Cloud Project, you should:

		B. Review the IAM permissions for any role that allows for data access.

	Here's why:

		A. Enable Audit Logs for all APIs that are related to data storage.

			While enabling Audit Logs is essential for tracking activities, it might not directly provide a clear overview of who has access to view data. Audit Logs primarily record activities and not necessarily permission assignments.
		
		B. Review the IAM permissions for any role that allows for data access.

			This is the correct option. IAM (Identity and Access Management) controls access to resources, and reviewing IAM permissions for roles that have data access is crucial for understanding who has the ability to view data.
		
		C. Review the Identity-Aware Proxy settings for each resource.

			Identity-Aware Proxy (IAP) is more focused on controlling access to applications rather than managing permissions for data stored in Google Cloud.
		
		D. Create a Data Loss Prevention job.

			Data Loss Prevention (DLP) jobs are designed to detect and protect sensitive data, but they are not the primary tool for reviewing access permissions.
	
	Why Option B is Recommended:

		IAM roles define who (identity) has what access (permissions) to which resources. Reviewing IAM permissions provides a direct insight into who has access to view data.
	
	Conclusion:
		
		Option B, "Review the IAM permissions for any role that allows for data access," is the most suitable choice for identifying who has access to view data stored in your Google Cloud Project.

-------

Your company wants to standardize the creation and management of multiple Google Cloud resources using Infrastructure as Code. You want to minimize the amount of repetitive code needed to manage the environment. What should you do? [Question 160]
	
	Develop templates for the environment using Cloud Deployment Manager. [✔️]
	
	Use curl in a terminal to send a REST request to the relevant Google API for each individual resource.
	
	Use the Cloud Console interface to provision and manage all related resources.
	
	Create a bash script that contains all requirement steps as gcloud commands.

	-------

	To standardize the creation and management of multiple Google Cloud resources using Infrastructure as Code (IaC) and minimize repetitive code, the recommended option is:

		A. Develop templates for the environment using Cloud Deployment Manager.

	Here's why:

		A. Develop templates for the environment using Cloud Deployment Manager.

			Cloud Deployment Manager allows you to define all the resources needed for your environment in a declarative format using YAML or Jinja2 templates. This helps in creating repeatable and consistent infrastructure, minimizing repetitive code.
		
		B. Use curl in a terminal to send a REST request to the relevant Google API for each individual resource.

			This approach is not practical for managing multiple resources as it involves manual API calls for each resource, leading to complexity and potential errors.
		
		C. Use the Cloud Console interface to provision and manage all related resources.

			While the Cloud Console is useful for manual interactions, it doesn't provide the level of automation and consistency achieved through IaC tools like Cloud Deployment Manager.
		
		D. Create a bash script that contains all requirement steps as gcloud commands.

			Using a bash script may help automate some steps, but it lacks the declarative nature and resource abstraction provided by IaC tools.
	
	Why Option A is Recommended:

		Cloud Deployment Manager is a dedicated IaC tool on Google Cloud that allows you to define and manage resources using templates, providing a standardized and automated approach.
	
	Conclusion:
		
		Option A, "Develop templates for the environment using Cloud Deployment Manager," is the most suitable choice for standardizing the creation and management of multiple Google Cloud resources using Infrastructure as Code.

-------

You are working for a hospital that stores its medical images in an on-premises data room. The hospital wants to use Cloud Storage for archival storage of these images. The hospital wants an automated process to upload any new medical images to Cloud Storage. You need to design and implement a solution. What should you do? [Question 168]
	
	Create a Pub/Sub topic, and enable a Cloud Storage trigger for the Pub/Sub topic. Create an application that sends all medical images to the Pub/Sub topic.
		
	Deploy a Dataflow job from the batch template, Datastore to Cloud Storage. Schedule the batch job on the desired interval.
	
	Create a script that uses the gsutil command line interface to synchronize the on-premises storage with Cloud Storage. Schedule the script as a cron job. [✔️]
	
	In the Cloud Console, go to Cloud Storage. Upload the relevant images to the appropriate bucket.

	-------

	To design and implement a solution for automated uploading of new medical images from an on-premises data room to Cloud Storage, the recommended option is:

		C. Create a script that uses the gsutil command-line interface to synchronize the on-premises storage with Cloud Storage. Schedule the script as a cron job.

	Here's why:

		A. Create a Pub/Sub topic, and enable a Cloud Storage trigger for the Pub/Sub topic. Create an application that sends all medical images to the Pub/Sub topic.

			This approach involves unnecessary complexity and additional components. A simpler and more direct solution is needed.
		
		B. Deploy a Dataflow job from the batch template, "Datastore to Cloud Storage." Schedule the batch job on the desired interval.

			Dataflow may be overkill for a simple synchronization task, and it introduces complexity that is not required for this use case.
		
		C. Create a script that uses the gsutil command-line interface to synchronize the on-premises storage with Cloud Storage. Schedule the script as a cron job.

			This is the correct option. Using gsutil for synchronization provides a straightforward and efficient way to upload new images to Cloud Storage. Scheduling the script as a cron job ensures automation at the desired intervals.
		
		D. In the Cloud Console, go to Cloud Storage. Upload the relevant images to the appropriate bucket.

			Manually uploading images via the Cloud Console is not suitable for an automated process, especially when dealing with a large number of medical images.
	
	Why Option C is Recommended:

		The gsutil command-line interface is well-suited for efficient and scripted interactions with Cloud Storage.
		
		Scheduling the script as a cron job allows for automation at regular intervals, ensuring the continuous synchronization of new medical images.
	
	Conclusion:
		
		Option C, "Create a script that uses the gsutil command-line interface to synchronize the on-premises storage with Cloud Storage. Schedule the script as a cron job," is the most suitable choice for automating the upload of new medical images to Cloud Storage.

-------

** You are building an application that processes data files uploaded from thousands of suppliers. Your primary goals for the application are data security and the expiration of aged data. You need to design the application to: Restrict access so that suppliers can access only their own data. Give suppliers write access to data only for 30 minutes. Delete data that is over 45 days old. You have a very short development cycle, and you need to make sure that the application requires minimal maintenance. Which two strategies should you use? (Choose two.) [Question 159]
	
	Build a lifecycle policy to delete Cloud Storage objects after 45 days. [✔️]
	
	Use signed URLs to allow suppliers limited time access to store their objects. [✔️]
	
	Set up an SFTP server for your application, and create a separate user for each supplier.
	
	Build a Cloud function that triggers a timer of 45 days to delete objects that have expired. [ChatGPT Suggested]
	
	Develop a script that loops through all Cloud Storage buckets and deletes any buckets that are older than 45 days. [Suggested]

	-------

	The recommended strategies to achieve the goals of restricting access, implementing time-limited write access, and deleting aged data while requiring minimal maintenance are:

		B. Use signed URLs to allow suppliers limited time access to store their objects.

			Signed URLs are a secure way to grant temporary access to resources. In this case, suppliers can use signed URLs to upload their data objects within the specified time window.
		
		D. Build a Cloud function that triggers a timer of 45 days to delete objects that have expired.

			Cloud Functions can be triggered based on specific events, such as the creation of an object in Cloud Storage. By building a Cloud Function that triggers a timer to delete objects that have expired after 45 days, you automate the process without manual intervention.
		
		Explanation:

			A. Build a lifecycle policy to delete Cloud Storage objects after 45 days.

				While a lifecycle policy can be used to automatically delete objects after a certain period, it doesn't provide the granularity needed for restricting write access to 30 minutes.
			
			C. Set up an SFTP server for your application, and create a separate user for each supplier.

				Setting up an SFTP server introduces additional complexity and maintenance overhead, and it doesn't inherently address the time-limited write access requirement.
			
			E. Develop a script that loops through all Cloud Storage buckets and deletes any buckets that are older than 45 days.

				This approach is not efficient and may not provide the desired granularity for data deletion at the object level. Additionally, it could result in unintended deletion of data.
		
		Conclusion:
			
			Using signed URLs for limited time access by suppliers and building a Cloud Function to automatically delete aged data after 45 days are the recommended strategies for achieving the specified goals with minimal maintenance.

-------

Your company uses a large number of Google Cloud services centralized in a single project. All teams have specific projects for testing and development. The DevOps team needs access to all of the production services in order to perform their job. You want to prevent Google Cloud product changes from broadening their permissions in the future. You want to follow Google-recommended practices. What should you do?
[Question 158]
	
	Grant all members of the DevOps team the role of Project Editor on the organization level.
	
	Grant all members of the DevOps team the role of Project Editor on the production project.
	
	Create a custom role that combines the required permissions. Grant the DevOps team the custom role on the production project. [✔️]
	
	Create a custom role that combines the required permissions. Grant the DevOps team the custom role on the organization level.

	-------

	The recommended approach to granting DevOps team members access to production services while preventing unintended broadening of permissions is:

		C. Create a custom role that combines the required permissions. Grant the DevOps team the custom role on the production project.

	Explanation:

		A. Grant all members of the DevOps team the role of Project Editor on the organization level.

			This approach would grant the DevOps team too many permissions at the organization level, potentially leading to unintended access and changes across multiple projects.
		
		B. Grant all members of the DevOps team the role of Project Editor on the production project.

			While this would grant the necessary permissions for the production project, it doesn't address the goal of preventing unintended broadening of permissions in the future.
		
		D. Create a custom role that combines the required permissions. Grant the DevOps team the custom role on the organization level.

			Granting a custom role at the organization level is generally not recommended unless there is a specific need for organization-wide permissions. This approach can lead to broader access than necessary.
		
	Conclusion:
			
		Creating a custom role with the specific permissions required by the DevOps team and granting that custom role at the project level (specifically on the production project) provides the necessary access without introducing unnecessary broad permissions. It follows the principle of least privilege and ensures that changes in the future won't inadvertently broaden permissions.

-------

* You are deploying a production application on Compute Engine. You want to prevent anyone from accidentally destroying the instance by clicking the wrong button. What should you do? [Question 157]
	
	Disable the flag Delete boot disk when instance is deleted. [Suggested]
	
	Enable delete protection on the instance. [✔️]
	
	Disable Automatic restart on the instance.
	
	Enable Preemptibility on the instance.

	-------

	The most suitable option to prevent accidental destruction of the instance is:

		B. Enable delete protection on the instance.

	Explanation:

		A. Disable the flag "Delete boot disk when the instance is deleted."

			This option relates to whether the boot disk associated with the instance should be deleted when the instance is deleted. It doesn't prevent accidental deletion of the instance itself.
		
		B. Enable delete protection on the instance.

			Enabling delete protection ensures that the instance cannot be deleted through the usual methods, providing an additional layer of protection against accidental deletions.
		
		C. Disable Automatic restart on the instance.

			Automatic restart settings determine whether an instance should automatically restart after an unexpected termination, and it doesn't prevent intentional deletions.
		
		D. Enable Preemptibility on the instance.

			Preemptible instances are temporary and can be terminated by the system at any time. Enabling preemptibility is not suitable for preventing accidental destruction of a production instance.
	
	Conclusion:
		
		Enabling delete protection is the appropriate choice for preventing accidental deletion of a Compute Engine instance, providing an additional safeguard against unintended actions.

-------

You are the team lead of a group of 10 developers. You provided each developer with an individual Google Cloud Project that they can use as their personal sandbox to experiment with different Google Cloud solutions. You want to be notified if any of the developers are spending above $500 per month on their sandbox environment. What should you do? [Question 156]
	
	Create a single budget for all projects and configure budget alerts on this budget.
	
	Create a separate billing account per sandbox project and enable BigQuery billing exports. Create a Data Studio dashboard to plot the spending per billing account.
	
	Create a budget per project and configure budget alerts on all of these budgets. [✔️]
	
	Create a single billing account for all sandbox projects and enable BigQuery billing exports. Create a Data Studio dashboard to plot the spending per project.

	-------

	C. Create a budget per project and configure budget alerts on all of these budgets.

	Explanation:

		Setting up individual budgets per project is the recommended approach to monitor and receive alerts for spending on each developer's sandbox environment. This allows you to track and control costs on a per-project basis. Here's why:

	A. Create a single budget for all projects and configure budget alerts on this budget.

		This option would not provide you with the granularity to identify which specific project (developer's sandbox) is exceeding the budget.
	
	B. Create a separate billing account per sandbox project and enable BigQuery billing exports. Create a Data Studio dashboard to plot the spending per billing account.

		While creating separate billing accounts per project is possible, it adds unnecessary complexity. Budgets can be managed at the project level, and this approach involves additional steps that may not be needed for individual sandboxes.
	
	C. Create a budget per project and configure budget alerts on all of these budgets.

		This option allows you to set specific budgets for each developer's sandbox, and you will receive alerts when the spending for any individual project exceeds the configured limit.
	
	D. Create a single billing account for all sandbox projects and enable BigQuery billing exports. Create a Data Studio dashboard to plot the spending per project.

		Using a single billing account for all sandbox projects might make it challenging to isolate and manage costs for each developer individually.
	
	Conclusion:
		
		Creating a budget per project and configuring budget alerts for each individual sandbox project is the most effective and straightforward approach to monitor and control spending on a per-developer basis.

-------

You are storing sensitive information in a Cloud Storage bucket. For legal reasons, you need to be able to record all requests that read any of the stored data. You want to make sure you comply with these requirements. What should you do? [Question 155]
	
	Enable the Identity Aware Proxy API on the project.
	
	Scan the bucket using the Data Loss Prevention API.
	
	Allow only a single Service Account access to read the data.
	
	Enable Data Access audit logs for the Cloud Storage API. [✔️]

	-------

	D. Enable Data Access audit logs for the Cloud Storage API.

		Explanation:

			To record all requests that read data from a Cloud Storage bucket, you should enable Data Access audit logs for the Cloud Storage API. Data Access audit logs provide detailed information about who accessed the data, when the access occurred, and other relevant details. This is crucial for compliance and monitoring purposes.

		Option A: Enable the Identity Aware Proxy API on the project.

			Identity Aware Proxy (IAP) is more focused on controlling and securing access to applications rather than logging all read requests to Cloud Storage. It may provide access controls but doesn't log individual data access events.
	
		Option B: Scan the bucket using the Data Loss Prevention API.

			The Data Loss Prevention API is used to scan and redact sensitive data, but it doesn't provide detailed logs of every read request.
		
		Option C: Allow only a single Service Account access to read the data.

			While restricting access to a single Service Account is a good practice for limiting permissions, it doesn't automatically provide audit logs of data access events.
		
		Option D is the most suitable for the specified requirement, allowing you to maintain an audit trail of all data access events in the Cloud Storage bucket.

-------

* You have been asked to set up Object Lifecycle Management for objects stored in storage buckets. The objects are written once and accessed frequently for 30 days. After 30 days, the objects are not read again unless there is a special need. The objects should be kept for three years, and you need to minimize cost. What should you do? [Question 154]
	
	Set up a policy that uses Nearline storage for 30 days and then moves to Archive storage for three years.
	[Suggested]
	
	Set up a policy that uses Standard storage for 30 days and then moves to Archive storage for three years. [✔️]
	
	Set up a policy that uses Nearline storage for 30 days, then moves the Coldline for one year, and then moves to Archive storage for two years.
	
	Set up a policy that uses Standard storage for 30 days, then moves to Coldline for one year, and then moves to Archive storage for two years.

	-------

	B. Set up a policy that uses Standard storage for 30 days and then moves to Archive storage for three years.

	Explanation:

		Object Lifecycle Management in Cloud Storage allows you to automatically manage the lifecycle of your objects, including transitions between storage classes. In this scenario, the requirement is to minimize cost while keeping the objects for three years. The appropriate approach is to use Standard storage for the initial 30 days (frequent access) and then transition the objects to a lower-cost storage class for the remaining three years.

	Options:

		Option A: Set up a policy that uses Nearline storage for 30 days and then moves to Archive storage for three years.

			This option involves two transitions and may incur additional costs for Nearline storage. It is more cost-effective to transition directly from Standard storage to Archive storage.
		
		Option C: Set up a policy that uses Nearline storage for 30 days, then moves to Coldline for one year, and then moves to Archive storage for two years.

			Similar to Option A, this involves multiple transitions and may not be the most cost-effective solution for the described scenario.
		
		Option D: Set up a policy that uses Standard storage for 30 days, then moves to Coldline for one year, and then moves to Archive storage for two years.

			This option involves unnecessary transitions to Coldline storage before moving to Archive storage. Directly transitioning from Standard to Archive storage is more cost-effective.
		
		Therefore, Option B is the most suitable for minimizing costs while meeting the specified requirements.

-------

You have created a code snippet that should be triggered whenever a new file is uploaded to a Cloud Storage bucket. You want to deploy this code snippet. What should you do? [Question 153]
	
	Use App Engine and configure Cloud Scheduler to trigger the application using Pub/Sub.
	
	Use Cloud Functions and configure the bucket as a trigger resource. [✔️]
	
	Use Google Kubernetes Engine and configure a CronJob to trigger the application using Pub/Sub.
	
	Use Dataflow as a batch job, and configure the bucket as a data source.

	-------

	B. Use Cloud Functions and configure the bucket as a trigger resource.

	Explanation:

		When you want to execute a code snippet in response to a specific event, such as a new file being uploaded to a Cloud Storage bucket, Google Cloud Functions is a suitable service for this purpose. Cloud Functions allows you to write lightweight, single-purpose functions and trigger them in response to various events.

		In this scenario, you would configure Cloud Functions to be triggered by Cloud Storage events. Specifically, you can configure the Cloud Storage bucket as a trigger resource, so whenever a new file is uploaded to that bucket, the associated Cloud Function is executed.

	Options:

		Option A: Use App Engine and configure Cloud Scheduler to trigger the application using Pub/Sub.

			While App Engine is a platform for building and deploying applications, it may not be the most suitable choice for event-driven, lightweight code snippets triggered by Cloud Storage events.
		
		Option C: Use Google Kubernetes Engine and configure a CronJob to trigger the application using Pub/Sub.

			Kubernetes Engine and CronJobs are more suitable for complex applications or scheduled tasks, not for lightweight functions triggered by Cloud Storage events.
		
		Option D: Use Dataflow as a batch job, and configure the bucket as a data source.

			Cloud Dataflow is designed for processing and analyzing data in batch or stream mode. It is not the most suitable option for executing code snippets in response to specific Cloud Storage events.
	
	Therefore, Option B, using Cloud Functions and configuring the bucket as a trigger resource, is the most appropriate choice for deploying a code snippet triggered by new file uploads to a Cloud Storage bucket.

-------

** Your company runs its Linux workloads on Compute Engine instances. Your company will be working with a new operations partner that does not use Google Accounts. You need to grant access to the instances to your operations partner so they can maintain the installed tooling. What should you do? [Question 152]
	
	Enable Cloud IAP for the Compute Engine instances, and add the operations partner as a Cloud IAP Tunnel User. [✔️]
	
	Tag all the instances with the same network tag. Create a firewall rule in the VPC to grant TCP access on port 22 for traffic from the operations partner to instances with the network tag. [Suggested]
	
	Set up Cloud VPN between your Google Cloud VPC and the internal network of the operations partner.
	
	Ask the operations partner to generate SSH key pairs, and add the public keys to the VM instances.
	[ChatGPT Suggested]

-------

* You are working with a user to set up an application in a new VPC behind a firewall. The user is concerned about data egress. You want to configure the fewest open egress ports. What should you do?
[Question 151]
	
	Set up a low-priority (65534) rule that blocks all egress and a high-priority rule (1000) that allows only the appropriate ports. [✔️]
	
	Set up a high-priority (1000) rule that pairs both ingress and egress ports.
	
	Set up a high-priority (1000) rule that blocks all egress and a low-priority (65534) rule that allows only the appropriate ports. [Suggested]
	
	Set up a high-priority (1000) rule to allow the appropriate ports. [ChatGPT Suggested]

	-------

	D. Set up a high-priority (1000) rule to allow the appropriate ports.

	Explanation:

		To configure the fewest open egress ports while allowing only the necessary traffic, you should set up a high-priority rule that explicitly allows the required egress ports. This rule will permit outbound traffic on specific ports, while all other traffic will be blocked by default. This approach enhances security by minimizing the attack surface.

	Option A suggests setting up a low-priority rule that blocks all egress and a high-priority rule that allows only the appropriate ports. However, this introduces unnecessary complexity. A single high-priority rule to allow the required egress ports is simpler and achieves the same goal.

	Option B mentions pairing both ingress and egress ports in a high-priority rule, which is not necessary for egress traffic control. Ingress and egress rules are typically defined separately.

	Option C suggests setting up a high-priority rule that blocks all egress and a low-priority rule that allows only the appropriate ports. This approach is less common and might lead to unintended consequences if not carefully configured.

	Therefore, option D is the most straightforward and effective approach for configuring egress firewall rules while allowing only the necessary traffic.

-------

* You have a batch workload that runs every night and uses a large number of Virtual Machines (VMs). It is fault-tolerant and can tolerate some of the VMs being terminated. The current cost of VMs is too high. What should you do? [Question 150]
	
	Run a test using simulated maintenance events. If the test is successful, use preemptible N1 Standard VMs when running future jobs. [✔️]
	
	Run a test using simulated maintenance events. If the test is successful, use N1 Standard VMs when running future jobs. [Suggested]
	
	Run a test using a Managed Instance Group. If the test is successful, use N1 Standard VMs in the Managed Instance Group when running future jobs.
	
	Run a test using N1 standard VMs instead of N2. If the test is successful, use N1 Standard VMs when running future jobs.

	-------

	A. Run a test using simulated maintenance events. If the test is successful, use preemptible N1 Standard VMs when running future jobs.

	Explanation:

		To reduce costs for batch workloads, you can use preemptible VMs, which are short-lived and more affordable but can be preempted by Google Cloud. Since your batch workload is fault-tolerant and can handle VM terminations, preemptible VMs are a suitable option.

		To ensure the feasibility of using preemptible VMs, it's recommended to run a test using simulated maintenance events. This involves simulating preemption events to verify that your workload can gracefully handle interruptions without significant impact on its performance.

	Option A suggests running a test using simulated maintenance events and, if successful, using preemptible N1 Standard VMs for future jobs. This approach helps you validate the suitability of preemptible VMs for your workload before fully adopting them.

	Options B, C, and D propose alternative approaches without specifically addressing the use of preemptible VMs. Since cost reduction is a key consideration, choosing preemptible VMs is a more cost-effective solution for fault-tolerant batch workloads, assuming they pass the simulated maintenance event test.

-------

* You are running multiple VPC-native Google Kubernetes Engine clusters in the same subnet. The IPs available for the nodes are exhausted, and you want to ensure that the clusters can grow in nodes when needed. What should you do? [Question 149]
	
	Create a new subnet in the same region as the subnet being used. [ChatGPT Suggested]
	
	Add an alias IP range to the subnet used by the GKE clusters.
	
	Create a new VPC, and set up VPC peering with the existing VP.
	
	Expand the CIDR range of the relevant subnet for the cluster. [✔️]

	-------

	Bard:

		The correct answer is D. Expand the CIDR range of the relevant subnet for the cluster.

		Here's a detailed explanation of why each option is right or wrong:

		Option A: Create a new subnet in the same region as the subnet being used

			This option is incorrect because it doesn't address the current shortage of IP addresses for the existing clusters. Creating a new subnet only provides additional IP addresses, but it doesn't increase the total pool of IP addresses available to all the clusters. The new subnet would have its own set of IP addresses, separate from the existing subnet.

		Option B: Add an alias IP range to the subnet used by the GKE clusters

			This option is partially correct. Adding an alias IP range can increase the total pool of IP addresses available to the clusters, but it's important to note that alias IP ranges are not recommended for production workloads due to their limitations in scaling and routing. Alias IP ranges are primarily intended for temporary or testing purposes.

		Option C: Create a new VPC, and set up VPC peering with the existing VPC

			This option is not ideal for this scenario. While VPC peering allows two VPCs to communicate with each other, it doesn't directly address the shortage of IP addresses within the cluster's subnet. Pods in one cluster would still have to contend with the available IP addresses within their own subnet.

		Option D: Expand the CIDR range of the relevant subnet for the cluster

			This option is the most effective solution for increasing the IP address pool for the existing GKE clusters. By expanding the CIDR range of the subnet, you're effectively making more IP addresses available to all the clusters within that subnet. This enables the clusters to scale up their node capacity without running into IP address limitations.

		In summary, expanding the CIDR range of the relevant subnet is the most efficient and sustainable approach to address the IP address shortage for the existing GKE clusters. It allows for controlled growth and ensures sufficient IP addresses for future scalability.

-------

* A colleague handed over a Google Cloud Platform project for you to maintain. As part of a security checkup, you want to review who has been granted the Project Owner role. What should you do? [Question 148]
	
	In the console, validate which SSH keys have been stored as project-wide keys. [Suggested]
	
	Navigate to Identity-Aware Proxy and check the permissions for these resources.
	
	Enable Audit Logs on the IAM & admin page for all resources, and validate the results.
	
	Use the command gcloud projects get-iam-policy to view the current role assignments. [✔️]

	-------

	Bard:

		The correct answer is D. Use the command gcloud projects get "i am"policy to view the current role assignments.

		Here's a detailed breakdown of why each option is right or wrong:

		Option A: In the console, validate which SSH keys have been stored as project-wide keys.

			This option is incorrect because it focuses on SSH keys, which are not directly related to project ownership. Project ownership refers to the role that provides the most control over a project's resources and settings. SSH keys are used for authentication purposes, allowing authorized users to access resources within the project.

		Option B: Navigate to Identity-Aware Proxy and check the permissions for these resources.

			Identity-Aware Proxy (IAP) is a security feature that controls access to Google Cloud resources based on user identity. It's not directly related to managing project owners. IAP policies define who can access specific resources, but they don't specify which users have the Project Owner role.

		Option C: Enable Audit Logs on the IAM & admin page for all resources, and validate the results.

			Enabling audit logs can help you track activity within the project, including role changes. However, it's not the most efficient way to determine who currently holds the Project Owner role. Audit logs typically contain a large volume of data, and it would be time-consuming to manually review them to identify role changes.

		Option D: Use the command gcloud projects get "i am"policy to view the current role assignments.

			This option is the most precise and efficient method to determine who has the Project Owner role. The gcloud command directly retrieves the IAM policy for the current project, and it specifically identifies the roles granted to the user identified by the "iam" prefix. This provides a clear and direct way to check for the Project Owner role.

		Therefore, the command gcloud projects get "i am"policy is the most effective way to review the current role assignments for the Project Owner role.

-------

You are hosting an application from Compute Engine Virtual Machines (VMs) in us-central1-a. You want to adjust your design to support the failure of a single Compute Engine zone, eliminate downtime, and minimize cost. What should you do? [Question 36]
	
	Create Compute Engine resources in us-central1-b. Balance the load across both us-central1-a and us-central1-b.
	[✔️]

	Create a Managed Instance Group and specify us-central1-a as the zone. Configure the Health Check with a short Health Interval.
	
	Create an HTTP(S) Load Balancer. Create one or more global forwarding rules to direct traffic to your VMs.
	
	Perform regular backups of your application. Create a Cloud Monitoring Alert and be notified if your application becomes unavailable. Restore from backups when notified.

	-------

	Bard:

		The correct answer is A. Create Compute Engine resources in us""central1""b. Balance the load across both us""central1""a and us""central1""b.

		Here's a detailed breakdown of why each option is right or wrong:

		Option A: This option is the most appropriate solution for achieving the desired outcome of supporting zone failure, eliminating downtime, and minimizing cost. By placing Compute Engine resources in us""central1""b and load balancing traffic across both zones, you effectively distribute traffic and handle zone failures gracefully. If one zone goes down, traffic will automatically reroute to the healthy zone, ensuring continuous availability.

		Option B: Creating a Managed Instance Group (MIG) and specifying us""central1""a as the zone is not sufficient to address zone failures. While a MIG automatically provisions and manages VMs, it doesn't automatically distribute traffic across zones. The Health Check configuration with a short Health Interval would help detect and restart VMs if they fail, but it wouldn't handle zone-wide outages.

		Option C: Creating an HTTP(S) Load Balancer is a good step towards load balancing, but it doesn't address the issue of zone failures. Placing the load balancer in us""central1""a and creating one or more global forwarding rules to direct traffic to the VMs would only distribute traffic within the same zone. A zone failure would still bring down the entire application.

		Option D: Performing regular backups and restoring from backups when notified is a reactive approach that doesn't provide real-time resilience to zone failures. While it's important to have backups, relying solely on them would lead to downtime during the restoration process.

		In summary, distributing Compute Engine resources across multiple zones and load balancing traffic between them is the most effective way to ensure high availability and minimize downtime in the event of zone failures. This approach balances the load and redirects traffic to healthy zones, keeping the application up and running even if one zone experiences an outage.

-------

You have an application that uses Cloud Spanner as a database backend to keep current state information about users. Cloud Bigtable logs all events triggered by users. You export Cloud Spanner data to Cloud Storage during daily backups. One of your analysts asks you to join data from Cloud Spanner and Cloud Bigtable for specific users. You want to complete this ad hoc request as efficiently as possible. What should you do? [Question 146]
	
	Create a dataflow job that copies data from Cloud Bigtable and Cloud Storage for specific users.

	Create a dataflow job that copies data from Cloud Bigtable and Cloud Spanner for specific users.
	
	Create a Cloud Dataproc cluster that runs a Spark job to extract data from Cloud Bigtable and Cloud Storage for specific users.
	
	Create two separate BigQuery external tables on Cloud Storage and Cloud Bigtable. Use the BigQuery console to join these tables through user fields, and apply appropriate filters. [✔️]

	-------

	Bard:

		The correct answer is D. Create two separate BigQuery external tables on Cloud Storage and Cloud Bigtable. Use the BigQuery console to join these tables through user fields, and apply appropriate filters.

		Here's a detailed breakdown of why each option is right or wrong:

		Option A: Creating a Dataflow job to copy data from Cloud Bigtable and Cloud Storage is inefficient for an ad hoc request. Dataflow jobs are designed for batch processing and may take time to complete, especially for large datasets. Additionally, copying data from two separate sources would require additional steps.

		Option B: Creating a Dataflow job to copy data from Cloud Bigtable and Cloud Spanner would be even less efficient. Cloud Spanner is a fully managed relational database, and its data can be directly loaded into BigQuery using external tables. Copying the data to Cloud Storage first would be unnecessary and add processing overhead.

		Option C: Creating a Cloud Dataproc cluster and running a Spark job to extract data from Cloud Bigtable and Cloud Storage would be more complex and time-consuming compared to using BigQuery's built-in capabilities. Spark is a powerful processing framework, but it's not specifically optimized for joining data from different sources. Additionally, setting up and managing a Dataproc cluster would be unnecessary for a single ad hoc query.

		Option D: Using BigQuery's external tables feature to load data from Cloud Storage and Cloud Spanner directly into BigQuery, and then joining the tables using the user fields and applying appropriate filters is the most efficient and straightforward approach for an ad hoc request. BigQuery is designed for large-scale data analysis, and its built-in query capabilities make it ideal for joining data from different sources. This approach eliminates the need for additional data copying or processing steps.

		Therefore, creating separate BigQuery external tables and joining them using the BigQuery console is the most efficient way to address the ad hoc request for joining data from Cloud Spanner and Cloud Bigtable for specific users.

-------

** Your existing application running in Google Kubernetes Engine (GKE) consists of multiple pods running on four GKE n1-standard-2 nodes. You need to deploy additional pods requiring n2-highmem-16 nodes without any downtime. What should you do? [Question 34]
	
	Use gcloud container clusters upgrade. Deploy the new services. [Bard Suggested]
	
	Create a new Node Pool and specify machine type n2-highmem-16. Deploy the new pods. [✔️]
	
	Create a new cluster with n2-highmem-16 nodes. Redeploy the pods and delete the old cluster.
	
	Create a new cluster with both n1-standard-2 and n2-highmem-16 nodes. Redeploy the pods and delete the old cluster.

	-------

	Bard:

		The correct answer is A. Use gcloud container clusters upgrade. Deploy the new services.

		This is the most appropriate solution for adding pods to an existing application running on GKE without any downtime. The gcloud container clusters upgrade command allows you to upgrade an existing cluster to a new machine type, such as n2""highmem""16, without disrupting running applications. This means that you can add the new pods to the existing cluster without having to take it offline.

		Here's a breakdown of why the other options are not as suitable:

		Option B: Creating a new Node Pool and specifying machine type n2""highmem""16 would require manually migrating the pods to the new node pool. This could cause downtime during the migration process.

		Option C: Creating a new cluster with n2""highmem""16 nodes and redeploying the pods would require deleting the old cluster and recreating the application. This would be time-consuming and could also cause downtime.

		Option D: Creating a new cluster with both n1""standard""2 and n2""highmem""16 nodes would make it more complex to manage the two different machine types. It would also not be necessary to have both machine types running at the same time.

		Therefore, using gcloud container clusters upgrade to upgrade the existing cluster to n2""highmem""16 nodes and deploying the new pods is the most efficient and reliable way to add pods to an existing application running on GKE without any downtime.

	-------

	ChatGPT:

		B. Create a new Node Pool and specify machine type n2"highmem"16. Deploy the new pods.

		Explanation:

			In Google Kubernetes Engine (GKE), you can create a new Node Pool with a different machine type to accommodate pods with specific resource requirements without causing downtime. In this scenario, you need to deploy additional pods requiring n2"highmem"16 nodes. The steps to achieve this are as follows:

				Create a new Node Pool:

					Use the gcloud container node-pools create command to create a new Node Pool.
					
					Specify the machine type as n2-highmem-16 for the new Node Pool.
						
					Example:
						
						gcloud container node-pools create highmem-pool --machine-type=n2-highmem-16 --num-nodes=2
				
				Deploy new pods:

					Deploy the additional pods that require the higher resource specification.
					You can use the new Node Pool for scheduling these pods.
					
					Example:

						kubectl apply -f your_new_pod_spec.yaml
				
				Verify and scale:

					Verify that the new pods are running on the nodes from the new Node Pool.
					
					If everything is working as expected, you can scale down the old Node Pool or keep it as needed.
		
		Option A suggests using gcloud container clusters upgrade, which typically upgrades the entire cluster. This might cause downtime and is not suitable for adding a different machine type.

		Option C suggests creating a new cluster and redeploying the pods. This approach would involve more downtime and operational complexity.

		Option D suggests creating a new cluster with both n1"standard"2 and n2"highmem"16 nodes. This might not be optimal, and it's usually better to use separate Node Pools for different machine types within the same cluster.

-------

You have a Compute Engine instance hosting an application used between 9 AM and 6 PM on weekdays. You want to back up this instance daily for disaster recovery purposes. You want to keep the backups for 30 days. You want the Google-recommended solution with the least management overhead and the least number of services. What should you do? [Question 144]
	
	1. Update your instances' metadata to add the following value: snapshot-schedule: 0 1 * * * 2. Update your instances' metadata to add the following value: snapshot-retention: 30.
	
	1. In the Cloud Console, go to the Compute Engine Disks page and select your instance's disk. 2. In the Snapshot Schedule section, select Create Schedule and configure the following parameters: Schedule frequency: Daily. Start time: 1:00 AM - 2:00 AM. Autodelete snapshots after: 30 days. [✔️]
	
	1. Create a Cloud Function that creates a snapshot of your instance's disk. 2. Create a Cloud Function that deletes snapshots that are older than 30 days. 3. Use Cloud Scheduler to trigger both Cloud Functions daily at 1:00 AM.
	
	1. Create a bash script in the instance that copies the content of the disk to Cloud Storage. 2. Create a bash script in the instance that deletes data older than 30 days in the backup Cloud Storage bucket. 3. Configure the instance's crontab to execute these scripts daily at 1:00 AM.

	-------

	Bard:

		The correct answer is B.1. In the Cloud Console, go to the Compute Engine Disks page and select your instance's disk. 2. In the Snapshot Schedule section, select Create Schedule and configure the following parameters: - Schedule frequency: Daily - Start time: 1:00 AM ג€” 2:00 AM - Autodelete snapshots after: 30 days Most Voted.

		Here's a detailed breakdown of why each option is right or wrong:

		Option A: Updating instance metadata is not the recommended approach for setting up scheduled snapshots. Metadata is intended for storing configuration data, not for defining complex behaviors. Using the built-in snapshot scheduling feature provides a more robust and manageable solution.

		Option B: The Cloud Console's snapshot scheduling feature is a straightforward and recommended approach for automating daily snapshots with retention settings. It provides a self-service mechanism for configuring and managing snapshots without the need for scripting or managing external services.

		Option C: Implementing a solution using Cloud Functions and Cloud Scheduler introduces additional complexity and management overhead. It requires creating, deploying, and managing two separate Cloud Functions, along with configuring Cloud Scheduler to trigger them at the desired time.

		Option D: Using a bash script on the instance to copy data to Cloud Storage and delete old backups is not recommended for the following reasons:

			Manual Configuration: Requires manual setup and maintenance of the scripts and crontab entries.

			Limited Flexibility: Lacks the ability to handle errors, retries, and automatic backup cleanup.

			Scalability: Difficult to scale to multiple instances or manage snapshots for multiple systems.

		Therefore, using the Cloud Console's snapshot scheduling feature is the most appropriate and recommended solution for the given scenario. It offers a simplified, self-service approach for setting up and managing daily snapshots with retention policies, ensuring consistent backup protection.

-------

Your team maintains the infrastructure for your organization. The current infrastructure requires changes. You need to share your proposed changes with the rest of the team. You want to follow Google's recommended best practices. What should you do? [Question 143]
	
	Use Deployment Manager templates to describe the proposed changes and store them in a Cloud Storage bucket.
	
	Use Deployment Manager templates to describe the proposed changes and store them in Cloud Source Repositories. [✔️]
	
	Apply the changes in a development environment, run gcloud compute instances list, and then save the output in a shared Storage bucket.
	
	Apply the changes in a development environment, run gcloud compute instances list, and then save the output in Cloud Source Repositories.

	-------

	Bard:

		The correct answer is B. Use Deployment Manager templates to describe the proposed changes and store them in Cloud Source Repositories.

		Here's a detailed explanation of why each option is right or wrong:

		Option A: Storing Deployment Manager templates in Cloud Storage is not recommended, as it doesn't provide version control or collaboration capabilities. Cloud Storage is primarily used for storing static data, while Deployment Manager templates are intended to manage infrastructure configuration changes.

		Option B: Using Deployment Manager templates and storing them in Cloud Source Repositories is the most recommended approach for sharing infrastructure change proposals. Deployment Manager templates provide a declarative way to define infrastructure configurations, and Cloud Source Repositories offer version control, collaboration, and auditing features. This allows the team to review, discuss, and collaborate on the proposed changes in a central location.

		Option C: Applying the changes in a development environment and saving the output from gcloud compute instances list in a shared Storage bucket is not an effective way to share infrastructure change proposals. It doesn't provide a structured and maintainable way to describe the proposed changes, and it lacks version control and collaboration capabilities.

		Option D: Applying the changes in a development environment, saving the output from gcloud compute instances list in Cloud Source Repositories, and then sharing the repository doesn't fully address the issue. It's still not a structured approach to describe the proposed changes, and it doesn't provide the same level of collaboration and version control as using Deployment Manager templates.

		In summary, utilizing Deployment Manager templates in Cloud Source Repositories is the most suitable option for sharing infrastructure change proposals. It provides a structured, version-controlled, and collaborative platform for defining and reviewing proposed changes, ensuring a more organized and efficient workflow for the team.

-------

Your company has workloads running on Compute Engine and on-premises. The Google Cloud Virtual Private Cloud (VPC) is connected to your WAN over a Virtual Private Network (VPN). You need to deploy a new Compute Engine instance and ensure that no public Internet traffic can be routed to it. What should you do?
[Question 142]
	
	Create the instance without a public IP address. [✔️]
	
	Create the instance with Private Google Access enabled.
	
	Create a deny-all egress firewall rule on the VPC network.
	
	Create a route on the VPC to route all traffic to the instance over the VPN tunnel.

	-------

	ChatGPT:

	A. Create the instance without a public IP address.

	Explanation:

		To ensure that no public Internet traffic can be routed to a Compute Engine instance, you should create the instance without a public IP address. This means the instance will only have an internal IP address and won't be accessible from the public Internet.

	Options B, C, and D do not directly address the requirement of preventing public Internet traffic to the instance:

	Option B (Create the instance with Private Google Access enabled) allows the instance to access Google services without a public IP, but it doesn't prevent inbound public traffic.

	Option C (Create a deny-all egress firewall rule on the VPC network) would affect outbound traffic, not inbound traffic, and might disrupt the instance's ability to communicate with the Internet if needed.

	Option D (Create a route on the VPC to route all traffic to the instance over the VPN tunnel) is about routing, but it doesn't prevent public Internet traffic. It would be more about controlling the path for the traffic but wouldn't stop public traffic from reaching the instance if it had a public IP.

	By creating the instance without a public IP address (Option A), you are ensuring that the instance is only reachable within the internal network and won't accept public Internet traffic.

-------

You created several resources in multiple Google Cloud projects. All projects are linked to different billing accounts. To better estimate future charges, you want to have a single visual representation of all costs incurred. You want to include new cost data as soon as possible. What should you do?
[Question 141]
	
	Configure Billing Data Export to BigQuery and visualize the data in Data Studio. [✔️]
	
	Visit the Cost Table page to get a CSV export and visualize it using Data Studio.
	
	Fill all resources in the Pricing Calculator to get an estimate of the monthly cost.
	
	Use the Reports view in the Cloud Billing Console to view the desired cost information.

	-------

	Bard:

		The correct answer is A. Configure Billing Data Export to BigQuery and visualize the data in Data Studio.

			This approach provides the most comprehensive and up-to-date view of your overall Google Cloud costs across multiple projects and billing accounts. By configuring billing data export to BigQuery, you can store your billing data in a centralized location, enabling you to easily query, analyze, and visualize it using Data Studio. This offers several benefits:

			Real-time Data Access: Data Studio can access the latest billing data from BigQuery, ensuring that you always have an accurate representation of your current costs.

			Detailed Cost Analysis: Data Studio provides powerful tools for analyzing and visualizing your billing data. You can create charts, graphs, and dashboards to track cost trends, identify cost outliers, and understand the breakdown of your spending across different projects and resources.

			Centralized View: By consolidating your billing data into a single location, you can get a holistic view of your overall cloud usage and costs, regardless of the projects or billing accounts involved.

		Option B, exporting the Cost Table to CSV, would involve manual data extraction and processing, which could be time-consuming and error-prone. Option C, using the Pricing Calculator, only provides estimates based on selected configurations, and it doesn't provide a comprehensive view of your actual costs. Option D, using the Reports view in the Cloud Billing Console, offers limited data visualization capabilities and may not be suitable for complex analysis.

		Therefore, configuring billing data export to BigQuery and visualizing the data in Data Studio is the most effective approach to effectively manage your Google Cloud costs across multiple projects and billing accounts.

-------

You are asked to set up application performance monitoring on Google Cloud projects A, B, and C as a single pane of glass. You want to monitor CPU, memory, and disk. What should you do? [Question 140]
	
	Enable API and then share charts from project A, B, and C.
	
	Enable API and then give the metrics.reader role to projects A, B, and C.
	
	Enable API and then use default dashboards to view all projects in sequence.
	
	Enable API, create a workspace under project A, and then add projects B and C. [✔️]

	-------

	Bard:

		The correct answer is D. Enable API, create a workspace under project A, and then add projects B and C.

			This approach provides a centralized view of application performance metrics across multiple projects while ensuring proper permissions and data ownership. By enabling the Cloud Monitoring API, you allow other projects to access and use monitoring data.

			Creating a workspace in project A serves as a central hub for consolidating metrics from projects B and C. This workspace can then be used to create dashboards, alerts, and other visualizations that effectively monitor CPU, memory, and disk usage across all three projects.

			Adding projects B and C to the workspace grants them read-only access to the metrics collected within the workspace. This ensures that project A retains ownership of the data while allowing other projects to analyze and monitor their performance without modifying the data.

		Option A, sharing charts from project A, B, and C, would require manual synchronization and maintenance of charts across multiple projects, making it inefficient and error-prone.

		Option B, granting the metrics.reader role to projects A, B, and C, would allow unrestricted access to monitoring data, which could potentially violate data ownership and privacy principles.

		Option C, using default dashboards, might not provide the flexibility and customization needed to effectively monitor CPU, memory, and disk usage across multiple projects.

		Therefore, enabling the API, creating a workspace, and adding projects B and C to the workspace is the most appropriate approach for setting up a centralized application performance monitoring solution. This approach ensures data ownership, proper permissions, and a unified view of metrics from multiple projects.

-------

The core business of your company is to rent out construction equipment at large scale. All the equipment that is being rented out has been equipped with multiple sensors that send event information every few seconds. These signals can vary from engine status, distance traveled, fuel level, and more. Customers are billed based on the consumption monitored by these sensors. You expect high throughput - up to thousands of events per hour per device - and need to retrieve consistent data based on the time of the event. Storing and retrieving individual signals should be atomic. What should you do? [Question 139]
	
	Create a file in Cloud Storage per device and append new data to that file.
	
	Create a file in Cloud Filestore per device and append new data to that file.
	
	Ingest the data into Datastore. Store data in an entity group based on the device.
	
	Ingest the data into Cloud Bigtable. Create a row key based on the event timestamp. [✔️]

	-------

	Bard:

		The correct answer is **D. Ingest the data into Cloud Bigtable. Create a row key based on the event timestamp. **

			Cloud Bigtable is a highly scalable, durable, and low-latency NoSQL database that is well-suited for handling high-throughput applications with stringent data consistency requirements. Storing and retrieving individual signals as separate rows in Cloud Bigtable with a row key based on the event timestamp ensures atomicity and consistency. This means that each event is recorded and retrieved as an individual unit, guaranteeing that no data is lost or corrupted.

			The high throughput of up to thousands of events per hour per device necessitates a database that can handle massive amounts of data efficiently. Cloud Bigtable's distributed architecture and high-performance data storage capabilities make it ideal for handling this level of data ingress and retrieval.

		Options A and B, using Cloud Storage or Cloud Filestore, are not suitable for this scenario due to their limited scalability and performance characteristics. Storing and retrieving event data in individual files would lead to performance bottlenecks and potentially data loss at high throughputs.

		Option C, using Datastore, while providing ACID (Atomicity, Consistency, Isolation, Durability) guarantees, is not as well-suited for high-throughput scenarios as Cloud Bigtable. Additionally, storing device-specific event data in entity groups within Datastore might not offer the granularity required for efficient data retrieval based on event timestamps.

		Therefore, ingesting the data into Cloud Bigtable with a row key based on the event timestamp is the most appropriate solution for handling the high throughput of sensor event data from construction equipment and ensuring atomicity and consistency for billing purposes.

-------

You have downloaded and installed the gcloud command line interface (CLI) and have authenticated with your Google Account. Most of your Compute Engine instances in your project run in the europe-west1-d zone. You want to avoid having to specify this zone with each CLI command when managing these instances. What should you do? [Question 138]
	
	Set the europe-west1-d zone as the default zone using the gcloud config subcommand. [✔️]
	
	In the Settings page for Compute Engine under Default location, set the zone to europe-west1-d.
	
	In the CLI installation directory, create a file called default.conf containing zone=europe-west1-d.
	
	Create a Metadata entry on the Compute Engine page with key compute/zone and value europe-west1-d.

	-------

	Bard:

		The correct answer is A. Set the europe-west1-d zone as the default zone using the gcloud config subcommand.

			To set the default zone for the gcloud CLI, you can use the gcloud config set command. Here's an example of how to do this:

				gcloud config set compute/zone europe-west1-d
			
			This will set the default zone for all future gcloud commands. You will no longer need to specify the zone explicitly.

		Option B: In the Settings page for Compute Engine under Default location, set the zone to europe "west1-d."

			This option is not recommended because it is specific to the Google Cloud Console and will not apply to the gcloud CLI. If you set the default zone in the console, you will still need to specify the zone explicitly when using the gcloud CLI.

		Option C: In the CLI installation directory, create a file called default.conf containing zone=europe "west1" d.

			This option is also not recommended because it is not officially supported by Google. It may not work in the future, and it could be difficult to maintain if you need to update the default zone.

		Option D: Create a Metadata entry on the Compute Engine page with key compute/zone and value europe "west1" d.

			This option is not recommended because it would require you to manually create the metadata entry for each instance you want to manage. The gcloud config set command is a more efficient and consistent way to set the default zone.

		Overall, the gcloud config set command is the most recommended way to set the default zone for the gcloud CLI. It is a simple, official, and consistent method that will work for all future gcloud commands.

-------

You are developing a new application and are looking for a Jenkins installation to build and deploy your source code. You want to automate the installation as quickly and easily as possible. What should you do?
[Question 137]

	Deploy Jenkins through the Google Cloud Marketplace. [✔️]
	
	Create a new Compute Engine instance. Run the Jenkins executable.
	
	Create a new Kubernetes Engine cluster. Create a deployment for the Jenkins image.
	
	Create an instance template with the Jenkins executable. Create a Managed Instance Group with this template.

	-------

	Bard:

		The correct answer is A. Deploy Jenkins through the Google Cloud Marketplace.

			This is the most convenient and efficient option for deploying Jenkins on Google Cloud Platform (GCP). The Google Cloud Marketplace provides a catalog of pre-built and certified software applications that can be easily installed and configured.

			Jenkins is available as a pre-built application in the Google Cloud Marketplace. By deploying Jenkins through the marketplace, you can skip the manual installation process and get up and running with Jenkins quickly.

		The other options are less suitable for automating the installation of Jenkins on GCP:

		Option B: Create a new Compute Engine instance. Run the Jenkins executable.
		This option is not as efficient as deploying Jenkins through the marketplace because it involves manually creating and configuring a Compute Engine instance.

		Option C: Create a new Kubernetes Engine cluster. Create a deployment for the Jenkins image.
		This option is more complex than deploying Jenkins through the marketplace and requires a working knowledge of Kubernetes.

		Option D: Create an instance template with the Jenkins executable. Create a managed instance group with this template.
		This option is similar to Option B, but it involves creating an instance template instead of manually configuring a Compute Engine instance.

		Therefore, the best option for automating the installation of Jenkins on GCP is to deploy Jenkins through the Google Cloud Marketplace. This option is the most convenient, efficient, and secure way to get up and running with Jenkins quickly.

-------

** Your company runs one batch process in an on-premises server that takes around 30 hours to complete. The task runs monthly, can be performed offline, and must be restarted if interrupted. You want to migrate this workload to the cloud while minimizing cost. What should you do? [Question 136]
	
	Migrate the workload to a Compute Engine Preemptible VM. [Bard Suggested]
	
	Migrate the workload to a Google Kubernetes Engine cluster with Preemptible nodes. [ChatGPT Suggested]
	
	Migrate the workload to a Compute Engine VM. Start and stop the instance as needed. [✔️]
	
	Create an Instance Template with Preemptible VMs On. Create a Managed Instance Group from the template and adjust Target CPU Utilization. Migrate the workload.

	-------

	Bard:

		The correct answer is A. Migrate the workload to a Compute Engine Preemptible VM.

			Preemptible VMs are an excellent way to minimize costs for batch workloads like yours. They are up to 90% cheaper than on-demand VMs, and they can be automatically terminated if Google needs the hardware for other purposes.

			Because your batch process runs monthly and can be performed offline, it is well-suited for a preemptible VM. If the instance is terminated during the batch process, you can simply restart it and the process will pick up where it left off.

			Here's a step-by-step guide on how to migrate your workload to a preemptible VM:

				Create a Compute Engine Preemptible VM instance.
				
					Follow the instructions in the Google Cloud documentation to create a preemptible VM instance.

				Configure the batch process to run on the VM.
				
					You will need to install the necessary software on the VM and configure the batch process to run automatically.

				Schedule the batch process to run monthly.
					
					You can use a scheduling tool like Cloud Composer or Cloud Scheduler to schedule the batch process to run monthly.

				Monitor the batch process.
					
					You can use Cloud Monitoring to monitor the status of the batch process and ensure that it is running successfully.

			Here are some additional benefits of using preemptible VMs for batch workloads:

				Scalability: Preemptible VMs can be easily scaled up or down as needed, which can save you money if your workload fluctuates throughout the month.
				
				No upfront costs: You only pay for the time that the preemptible VM is running, so you don't have to worry about upfront costs.
				
				Environmentally friendly: Preemptible VMs help to reduce Google's carbon footprint by providing a sustainable and cost-effective way to run workloads.
				
				Overall, migrating your batch workload to a preemptible VM is a great way to minimize costs and improve efficiency. By taking advantage of this cost-effective resource, you can save money on your cloud computing expenses while still getting the performance you need for your batch processing tasks.

		Option B: Migrate the workload to a Google Kubernetes Engine (GKE) cluster with Preemptible nodes.

			While GKE is a powerful and flexible container orchestration platform, it might not be the most suitable choice for this specific use case. GKE is primarily designed for managing long-running and scalable workloads, and it's not as well-suited for batch processing jobs that run for a limited duration and can be restarted if interrupted. Additionally, GKE introduces additional complexity and operational overhead compared to a single preemptible VM.

		Option C: Migrate the workload to a Compute Engine VM. Start and stop the instance as needed.

			Starting and stopping a regular Compute Engine VM every month could be inconvenient and inefficient, as it involves provisioning and tearing down an instance for each run. This could lead to performance overhead and potential disruptions during the batch process. Additionally, the on-demand pricing model of Compute Engine VMs would not be as cost-effective as using preemptible VMs for this type of workload.

		Option D: Create an Instance Template with Preemptible VMs On. Create a Managed Instance Group (MIG) from the template and adjust Target CPU Utilization. Migrate the workload.

			Using a managed instance group (MIG) with preemptible VMs can offer some benefits over starting and stopping a single VM, such as automatic scaling and increased availability. However, the complexity of configuring a MIG and adjusting the target CPU utilization might not be necessary for this simple batch processing task. Additionally, the potential for preemptions could still disrupt the batch process.

		Therefore, the most suitable option for migrating the workload to the cloud while minimizing cost is to utilize a preemptible Compute Engine VM. This approach offers the flexibility, cost-effectiveness, and reliability required for batch processing jobs that run monthly, can be performed offline, and need to be restarted if interrupted.

-------

You need to create a Compute Engine instance in a new project that doesn't exist yet. What should you do?
[Question 135]
	
	Using the Cloud SDK, create a new project, enable the Compute Engine API in that project, and then create the instance specifying your new project. [✔️]
	
	Enable the Compute Engine API in the Cloud Console, use the Cloud SDK to create the instance, and then use the --project flag to specify a new project.
	
	Using the Cloud SDK, create the new instance, and use the --project flag to specify the new project. Answer yes when prompted by Cloud SDK to enable the Compute Engine API.
	
	Enable the Compute Engine API in the Cloud Console. Go to the Compute Engine section of the Console to create a new instance, and look for the Create In A New Project option in the creation form.

	-------

	Bard:

		The most suitable option to create a Compute Engine instance in a new project that doesn't exist yet is 	
			A. Using the Cloud SDK, create a new project, enable the Compute Engine API in that project, and then create the instance specifying your new project.

				This approach ensures that the necessary APIs are enabled for managing Compute Engine resources in the newly created project before attempting to provision an instance. It also ensures that the instance is explicitly associated with the intended project, preventing any ambiguity or resource conflicts.

		The other options have potential shortcomings:

		Option B: Enabling the Compute Engine API in the Cloud Console and then using the Cloud SDK to create an instance might not ensure that the instance is created in the desired project, as the default project might be used if not explicitly specified.

		Option C: Creating an instance directly using the Cloud SDK and specifying the project using the --project flag may overlook the need to enable the Compute Engine API for that project. This could lead to errors or unexpected behavior.

		Option D: Creating an instance directly from the Compute Engine section of the Cloud Console and selecting the "Create in a new project" option might not be sufficient to ensure that the instance is properly associated with the new project. It's recommended to check project ownership and resource management permissions to avoid any conflicts.

		Therefore, creating a new project, enabling the Compute Engine API within that project, and then using the Cloud SDK to create the instance explicitly specifying the new project is the most reliable and secure approach for managing resources in the intended project from the outset.

-------

You built an application on your development laptop that uses Google Cloud services. Your application uses Application Default Credentials for authentication and works fine on your development laptop. You want to migrate this application to a Compute Engine Virtual Machine (VM) and set up authentication using Google-recommended practices and minimal changes. What should you do? [Question 134]
	
	Assign appropriate access for Google services to the service account used by the Compute Engine VM.
	[✔️ and Bard Suggested]
	
	Create a service account with appropriate access for Google services, and configure the application to use this account. [ChatGPT Suggested]
	
	Store credentials for service accounts with appropriate access for Google services in a config file, and deploy this config file with your application.
	
	Store credentials for your user account with appropriate access for Google services in a config file, and deploy this config file with your application.

	-------

	ChatGPT:

		Explanation:

			Service Account Best Practice:

				Google Cloud recommends using service accounts for applications running on Compute Engine VMs. Service accounts provide a way to authenticate your application without needing to store and manage user credentials.
			
			Least Privilege Principle:

				When creating a service account, you can assign it the least privilege necessary to perform the required tasks. This follows the principle of least privilege, enhancing the security posture of your application.
			
			Application Default Credentials (ADC):

				ADC is a Google Cloud feature that provides a simple way to get authorization credentials for use in calling Google APIs. When running on Compute Engine, ADC uses the service account associated with the VM, making it the recommended approach for authentication.
			
			Now, let's evaluate the other options:

				Assign appropriate access for Google services to the service account used by the Compute Engine VM:

					This is a part of the process, but it doesn't cover the complete setup. You also need to configure your application to use the service account, which is achieved by creating a service account and specifying it in your application.
					
				Store credentials for service accounts with appropriate access for Google services in a config file, and deploy this config file with your application:

					Storing credentials in a config file is generally not recommended, especially when service accounts and ADC can provide a more secure and manageable way for authentication.
					
				Store credentials for your user account with appropriate access for Google services in a config file, and deploy this config file with your application:

				This is not recommended for production scenarios. Using user credentials would require you to manage user-specific credentials on the Compute Engine VM, which is less secure and scalable compared to service accounts.
			
			In summary, creating a service account and configuring your application to use it aligns with Google's recommended practices and provides a secure and manageable way to handle authentication on Compute Engine VMs.

	Bard:

		The most suitable option for migrating your application to a Compute Engine VM and setting up authentication using Google-recommended practices and minimal changes is A. Assign appropriate access for Google services to the service account used by the Compute Engine VM.

		Using the service account associated with the Compute Engine VM provides several advantages:

			Security: The service account's credentials are stored on the VM itself, eliminating the need to store them in a configuration file. This reduces the risk of unauthorized access to sensitive credentials.

			Simplified Management: The service account is managed by Google Cloud, ensuring that it has the appropriate access for the applications running on the VM. This reduces the burden of managing and updating credentials.

			Compatibility: Application Default Credentials can automatically authenticate using the service account associated with the VM, minimizing changes to your application code.

		Option B, creating a service account and configuring the application to use it, would involve additional configuration steps and deployment of the service account credentials, which may not be necessary for this scenario.

		Option C, storing credentials for service accounts in a configuration file, introduces the risk of unauthorized access if the config file is compromised. It also requires manual updating of credentials when they change.

		Option D, storing credentials for your user account, is not recommended for cloud applications as it exposes your personal credentials to the cloud environment.

		Therefore, assigning appropriate access to the service account associated with the Compute Engine VM is the most secure, efficient, and Google-recommended approach for authenticating your application in the cloud.

-------

An application generates daily reports in a Compute Engine Virtual Machine (VM). The VM is in the project corp-iot-insights. Your team operates only in the project corp-aggregate-reports and needs a copy of the daily exports in the bucket corp-aggregate-reports-storage. You want to configure access so that the daily reports from the VM are available in the bucket corp-aggregate-reports-storage and use as few steps as possible while following Google-recommended practices. What should you do? [Question 133]
	
	Move both projects under the same folder.
	
	Grant the VM Service Account the role Storage Object Creator on corp-aggregate-reports-storage. [✔️]
	
	Create a Shared VPC network between both projects. Grant the VM Service Account the role Storage Object Creator on corp-iot-insights.
	
	Make corp-aggregate-reports-storage public and create a folder with a pseudo-randomized suffix name. Share the folder with the IoT team.

	-------

	Bard:

		The most straightforward and secure approach to configure access for the daily reports from the IoT team's VM to the corp-aggregate-reports-storage bucket is B. Grant the VM Service Account the role Storage Object Creator on corp-aggregate-reports-storage.

		This option minimizes the number of steps required and adheres to Google's recommended practices for granting least privilege access. By granting the VM Service Account the specific role of Storage Object Creator, the IoT team can only create objects in the corp-aggregate-reports-storage bucket, preventing unauthorized access or modifications.

		Option A, moving both projects under the same folder, introduces unnecessary complexity and might not be feasible if the projects belong to different departments or teams.

		Option C, creating a Shared VPC network between both projects, is a more involved approach and might not be necessary for this simple data transfer task. Granting the VM Service Account the Storage Object Creator role directly on the corp-aggregate-reports-storage bucket simplifies the access management.

		Option D, making corp-aggregate-reports-storage public and creating a folder with a pseudo-randomized suffix name, is a security risk as it exposes the bucket contents to the public internet. Sharing the folder with the IoT team would further reduce access control.

		Therefore, granting the VM Service Account the Storage Object Creator role directly on the corp-aggregate-reports-storage bucket is the most secure and straightforward approach for facilitating data transfer between the two projects.

-------

You have deployed an application on a single Compute Engine instance. The application writes logs to disk. Users start reporting errors with the application. You want to diagnose the problem. What should you do?
	
	Navigate to Cloud Logging and view the application logs.
	
	Connect to the instance's serial console and read the application logs.
	
	Configure a Health Check on the instance and set a Low Healthy Threshold value.
	
	Install and configure the Cloud Logging Agent and view the logs from Cloud Logging. [✔️]

-------

You need to create a copy of a custom Compute Engine Virtual Machine (VM) to facilitate an expected increase in application traffic due to a business acquisition. What should you do?
	
	Create a Compute Engine snapshot of your base VM. Create your images from that snapshot.
	
	Create a Compute Engine snapshot of your base VM. Create your instances from that snapshot.
	
	Create a custom Compute Engine image from a snapshot. Create your images from that image.
	
	Create a custom Compute Engine image from a snapshot. Create your instances from that image. [✔️]

	-------

	Correct Option (Snapshot->Image->Instances)

		Option 4: Create a custom Compute Engine image from a snapshot. Create your instances from that image.

			Image Customization:

				Creating a custom image allows you to capture the entire state of a VM, including the operating system, installed software, and configuration.
			
			Reproducibility: 

				Instances launched from a custom image are identical, ensuring consistency in your infrastructure.

			Snapshot as a Source: 

				Using a snapshot as the source for the custom image is a common and efficient way to capture a VM's disk state.

	Incorrect Options

		Option 1: Create a Compute Engine snapshot of your base VM. Create your images from that snapshot.

			Snapshot Purpose: 

				Snapshots are primarily used for backup and recovery. Creating images directly from snapshots is less common.
			
			Image Customization:

				The resulting image may not include the full state of the VM (e.g., installed software or configurations).
			
			Reproducibility:

				Instances launched from the image might not be identical if there were changes between the snapshot and image creation.

		Option 2: Create a Compute Engine snapshot of your base VM. Create your instances from that snapshot.

			Direct Snapshot Usage: 

				While snapshots are useful for backup and recovery, launching instances directly from snapshots is less common.
				
			Image Customization:

				Instances might lack the customization and standardization benefits provided by custom images.
			
			Reproducibility:

				Instances might not be as reproducible if there were changes between the snapshot and instance creation.

-------

You manage an App Engine Service that aggregates and visualizes data from BigQuery. The application is deployed with the default App Engine Service account. The data that needs to be visualized resides in a different project managed by another team. You do not have access to this project, but you want your application to be able to read data from the BigQuery dataset. What should you do?
	
	Ask the other team to grant your default App Engine Service account the role of BigQuery Job User.
	
	Ask the other team to grant your default App Engine Service account the role of BigQuery Data Viewer. [✔️]
	
	In Cloud IAM of your project, ensure that the default App Engine service account has the role of BigQuery Data Viewer.
	
	In Cloud IAM of your project, grant a newly created service account from the other team the role of BigQuery Job User in your project.

	-------

	Correct Option

		Option 2: Ask the other team to grant your default App Engine Service account the role of BigQuery Data Viewer.

			The default App Engine service account is associated with the App Engine service and is used for authentication and authorization. To enable your application to read data from the BigQuery dataset in the other project, you need to ensure that this service account has the necessary permissions.

			The role of BigQuery Data Viewer provides read access to the dataset. By asking the other team to grant this role to your default App Engine service account, you allow your application to view data in BigQuery.

	Incorrect Options

		Option 1: Ask the other team to grant your default App Engine Service account the role of BigQuery Job User.

			Asking for BigQuery Job User: This role provides permissions to run jobs, but it might be more permissions than necessary for just reading data. It's generally better to grant the minimum required permissions.

		Option 3: In Cloud IAM of your project, ensure that the default App Engine service account has the role of BigQuery Data Viewer.

			Configuring permissions within your project (IAM of your project): This won't affect permissions in the other project. Permissions must be granted in the project where the resources (BigQuery dataset) reside.

		Option 4: In Cloud IAM of your project, grant a newly created service account from the other team the role of BigQuery Job User in your project.

			Granting a newly created service account from the other team the role of BigQuery Job User in your project: This introduces additional complexity, and it's usually better to grant permissions directly to the service account associated with the resource that needs access (in this case, the default App Engine service account).

-------

Your Dataproc cluster runs in a single Virtual Private Cloud (VPC) network in a single subnet with range 172.16.20.128/25. There are no private IP addresses available in the VPC network. You want to add new VMs to communicate with your cluster using the minimum number of steps. What should you do?
	
	Modify the existing subnet range to 172.16.20.0/24. [✔️]
	
	Create a new Secondary IP Range in the VPC and configure the VMs to use that range.
 	
 	Create a new VPC network for the VMs. Enable VPC Peering between the VMs' VPC network and the Dataproc cluster VPC network.
	
	Create a new VPC network for the VMs with a subnet of 172.32.0.0/16. Enable VPC network Peering between the Dataproc VPC network and the VMs VPC network. Configure a custom Route exchange.

	-------

	Correct Option

		Option 1: Modify the existing subnet range to 172.16.20.0/24.

			When you create a subnet in Google Cloud, you define a specific range of IP addresses. In this case, the existing subnet range is 172.16.20.128/25, which allows for 128 addresses. However, if there is a need for more IP addresses, you can modify the subnet range to expand the address space.

			Steps:

				Navigate to the Google Cloud Console.
				
				Go to the VPC network section.
				
				Locate the subnet (in this case, the subnet with the range 172.16.20.128/25).
				
				Edit the subnet configuration.
				
				Change the IP range to 172.16.20.0/24 or any suitable range that meets your needs.
				
				Save the changes.
			
			Considerations:

				Ensure that the new IP range doesn't overlap with other existing subnets in the VPC.
				Update any dependent configurations or firewall rules that might be impacted by the IP address change.
			
			Advantages:

				It's a straightforward solution that doesn't involve creating additional resources.
				
				It efficiently expands the IP address space within the existing VPC.
			
			Drawbacks:

				If there are dependencies or services relying on the existing IP range, you need to update those configurations.

	Incorrect Options

		Option 2: Create a new Secondary IP Range in the VPC and configure the VMs to use that range.

			Secondary IP ranges are typically used for scenarios where you want to assign additional IP addresses to existing VM instances within a subnet. It doesn't expand the subnet's primary IP address space.
			
			It doesn't solve the issue of IP address exhaustion within the existing subnet, which is the primary concern in this scenario.

		Option 3: Create a new VPC network for the VMs. Enable VPC Peering between the VMs' VPC network and the Dataproc cluster VPC network.

			Creating a new VPC network for the VMs and setting up VPC Peering introduces additional complexity.
			
			It might be an over-engineered solution for the specific problem of IP address exhaustion within the existing VPC.
			
			It involves managing multiple VPC networks and setting up and maintaining peering connections.

		Option 4: Create a new VPC network for the VMs with a subnet of 172.32.0.0/16. Enable VPC network Peering between the Dataproc VPC network and the VMs VPC network. Configure a custom Route exchange.

			Similar to Option 3, this involves creating a new VPC network and setting up VPC Peering, introducing unnecessary complexity.
			
			Configuring custom route exchanges adds further complexity and may not be necessary for simply addressing IP address exhaustion.

-------

You have an application on a general-purpose Compute Engine instance that is experiencing excessive disk read throttling on its Zonal SSD Persistent Disk. The application primarily reads large files from disk. The disk size is currently 350 GB. You want to provide the maximum amount of throughput while minimizing costs. What should you do?
	
	Increase the size of the disk to 1 TB.
	
	Increase the allocated CPU to the instance.
	
	Migrate to use a Local SSD on the instance. [✔️]
	
	Migrate to use a Regional SSD on the instance.

	-------

	Correct Option

		Option 3: Migrate to use a Local SSD on the instance.

			Local SSDs are physically attached to the host machine and offer very high throughput and low latency compared to persistent disks.
			
			Local SSDs are ideal for applications with high I/O requirements, such as reading large files, as they provide excellent performance for read-heavy workloads.
			
			Local SSDs, however, come with some limitations, such as data durability (data is lost if the instance is terminated or undergoes maintenance), so they are best suited for temporary and performance-critical data.

	Incorrect Options

		Option 1: Increase the size of the disk to 1 TB.

			Increasing the disk size might provide more space, but it may not necessarily address the issue of excessive disk read throttling.
			
			The problem could be related to the performance characteristics of the Zonal SSD Persistent Disk, and a larger disk size might not guarantee higher throughput.

		Option 2: Increase the allocated CPU to the instance.

			Increasing CPU might improve overall system performance, but it may not directly address disk read throttling issues.
			
			The primary concern in this scenario is the disk read performance, so focusing on storage solutions is more appropriate.

		Option 4: Migrate to use a Regional SSD on the instance.

			While Regional SSDs offer higher durability and are suitable for certain use cases, they may not provide the same level of performance for read-heavy workloads compared to Local SSDs.
			
			Regional SSDs may also be more expensive than Local SSDs.

-------

You have an application that receives SSL-encrypted TCP traffic on port 443. Clients for this application are located all over the world. You want to minimize latency for the clients. Which load balancing option should you use?
	
	HTTPS Load Balancer.
	
	Network Load Balancer.
	
	SSL Proxy Load Balancer. [✔️]
	
	Internal TCP/UDP Load Balancer. Add a firewall rule allowing ingress traffic from 0.0.0.0/0 on the target instances.

-------

You have designed a solution on Google Cloud that uses multiple Google Cloud products. Your company has asked you to estimate the costs of the solution. You need to provide estimates for the monthly total cost. What should you do?

	For each Google Cloud product in the solution, review the pricing details on the products pricing page. Use the pricing calculator to total the monthly costs for each Google Cloud product. [✔️]
	
	For each Google Cloud product in the solution, review the pricing details on the products pricing page. Create a Google Sheet that summarizes the expected monthly costs for each product.
	
	Provision the solution on Google Cloud. Leave the solution provisioned for 1 week. Navigate to the Billing Report page in the Cloud Console. Multiply the 1 week cost to determine the monthly costs.
	
	Provision the solution on Google Cloud. Leave the solution provisioned for 1 week. Use Cloud Monitoring to determine the provisioned and used resource amounts. Multiply the 1 week cost to determine the monthly costs.

	-------

	Option 1: For each Google Cloud product in the solution, review the pricing details on the products pricing page. Use the pricing calculator to total the monthly costs for each Google Cloud product.

	Reasoning:

		The Google Cloud pricing calculator allows you to estimate costs by selecting individual products, specifying usage, and obtaining an estimate of the associated costs.
		
		This approach provides detailed visibility into the pricing structure of each service and allows you to tailor the estimate based on specific usage patterns.
	
	Steps:

		Visit the pricing pages of each Google Cloud product in your solution to understand the pricing details.
		
		Use the Google Cloud pricing calculator (https://cloud.google.com/products/calculator) to estimate costs for each product.
		
		Sum up the estimated costs for each product to obtain the total monthly cost.
	
	Benefits:

		This method offers transparency and granularity in estimating costs for each component of your solution.
		
		It allows you to adjust usage parameters and configurations to see how they impact the overall cost.
	
	Note:

		Always consider potential discounts, committed use discounts, and sustained use discounts that may apply to your usage.
	
	Other Options:

		Option 2 (Creating a Google Sheet):

			Creating a Google Sheet may be useful for tracking and organizing costs, but it does not replace the detailed estimation provided by the pricing calculator.
		
		Option 3 and Option 4:

			Provisioning resources and relying on actual usage data for a short period (1 week) may not accurately represent the typical monthly usage patterns. This approach may lead to underestimating or overestimating costs. It is not recommended for precise cost estimation.
		
	In summary, while creating a Google Sheet for tracking costs can be helpful for ongoing monitoring, using the pricing calculator for detailed estimation is the recommended approach for providing monthly cost estimates.

-------

Your company publishes large files on an Apache web server that runs on a Compute Engine instance. The Apache web server is not the only application running in the project. You want to receive an email when the egress network costs for the server exceed 100 dollars for the current month as measured by Google Cloud. What should you do?
	
	Set up a budget alert on the project with an amount of 100 dollars, a threshold of 100%, and notification type of email.
	
	Set up a budget alert on the billing account with an amount of 100 dollars, a threshold of 100%, and notification type of email.
	
	Export the billing data to BigQuery. Create a Cloud Function that uses BigQuery to sum the egress network costs of the exported billing data for the Apache web server for the current month and sends an email if it is over 100 dollars. Schedule the Cloud Function using Cloud Scheduler to run hourly. [✔️]
	
	Use the Cloud Logging Agent to export the Apache web server logs to Cloud Logging. Create a Cloud Function that uses BigQuery to parse the HTTP response log data in Cloud Logging for the current month and sends an email if the size of all HTTP responses, multiplied by current Google Cloud egress prices, totals over 100 dollars. Schedule the Cloud Function using Cloud Scheduler to run hourly.

-------

You have an application that uses Cloud Spanner as a backend database. The application has a very predictable traffic pattern. You want to automatically scale up or down the number of Spanner nodes depending on traffic. What should you do?
	
	Create a cron job that runs on a scheduled basis to review Cloud Monitoring metrics, and then resize the Spanner instance accordingly.
	
	Create a Cloud Monitoring alerting policy to send an alert to oncall SRE emails when Cloud Spanner CPU exceeds the threshold. SREs would scale resources up or down accordingly.
	
	Create a Cloud Monitoring alerting policy to send an alert to Google Cloud Support email when Cloud Spanner CPU exceeds your threshold. Google support would scale resources up or down accordingly.
	
	Create a Cloud Monitoring alerting policy to send an alert to webhook when Cloud Spanner CPU is over or under your threshold. Create a Cloud Function that listens to HTTP and resizes Spanner resources accordingly. [✔️]

	-------

	Option D (Cloud Monitoring alerting policy with a Cloud Function):
	
		Reasoning:

			This option involves creating a Cloud Monitoring alerting policy to send an alert to a webhook when Cloud Spanner CPU is over or under the specified threshold.
			
			A Cloud Function is then created to listen to the HTTP webhook and resize the Spanner resources accordingly.
		
		Steps:

			Create a Cloud Monitoring alerting policy based on CPU thresholds for Cloud Spanner.
			
			Configure the alerting policy to send alerts to a webhook.
			
			Create a Cloud Function that listens to the HTTP webhook.
			
			Implement logic in the Cloud Function to resize the Cloud Spanner resources based on the alert.
		
		Considerations:

			This approach allows for automated scaling based on specific metrics, such as CPU usage.
			
			The Cloud Function provides flexibility to execute custom logic for resizing resources.
		
		Benefits:

			Automation: The solution automates the scaling process based on predefined conditions.
			
			Flexibility: The Cloud Function can accommodate custom logic if needed.
		
		Drawbacks:

			Complexity: Implementing a Cloud Function introduces additional complexity compared to some other solutions.
			
			Maintenance: Regular monitoring and maintenance of the Cloud Function may be required.
			
			In summary, Option D is suitable for automated scaling based on Cloud Monitoring alerts. It provides flexibility and customization options, but it comes with the trade-off of increased complexity. The choice may depend on the organization's preference for automation and the level of customization required for the scaling process.

	Other Options:

		Option A (Cron job for scheduled resizing):

			Reasoning:
			
				This option suggests creating a cron job that runs on a scheduled basis to review Cloud Monitoring metrics and resize the Spanner instance accordingly.
			
			Considerations:
			
				Creating a cron job adds an automated scheduling element, but it lacks the real-time responsiveness that an alerting policy can provide.
				
				This method may not be suitable for handling sudden spikes or drops in traffic since it relies on a scheduled execution.
			
			Benefits:
			
				Simplicity: The approach is straightforward and involves scheduled tasks.
				
				Predictability: Resource adjustments are made at predefined intervals.
			
		Option B (Alerting policy for SREs to manually scale):

			Reasoning:
				
				This option involves creating a Cloud Monitoring alerting policy to send alerts to on-call SRE emails when Cloud Spanner CPU exceeds the threshold. SREs would then manually scale resources.
			
			Considerations:
			
				Manual intervention is required, and scaling decisions depend on human response time.
				
				It may be suitable for scenarios where real-time automated scaling is not critical, and human decision-making is preferred.
			
			Benefits:
				
				Human Control: SREs have direct control over resource scaling decisions.
				
				Adjustability: Manual scaling allows for adjustments based on context and considerations.
			
		Option C (Alerting policy for Google Cloud Support to scale):

			Reasoning:
				
				This option involves creating a Cloud Monitoring alerting policy to send alerts to Google Cloud Support email when Cloud Spanner CPU exceeds the threshold. Google support would then manually scale resources.
			
			Considerations:
			
				Similar to Option B, this approach relies on manual intervention by Google Cloud Support.
				
				It might be suitable for organizations that rely on external support for infrastructure management.
			
			Benefits:
				
				External Expertise: Involves Google Cloud Support in the scaling process.
				
				Access to Support Resources: Utilizes support resources for making scaling decisions.
		
		In summary:

			Option A (Scheduled resizing): Suitable for predictable, periodic adjustments but may not be responsive to real-time changes.

			Option B (Alerting for manual scaling): Suitable when human intervention is acceptable, and real-time scaling is not critical.

			Option C (Alerting for Google Cloud Support to scale): Suitable for organizations relying on external support for infrastructure management.

-------

You have a Compute Engine instance hosting a production application. You want to receive an email if the instance consumes more than 90% of its CPU resources for more than 15 minutes. You want to use Google services. What should you do?
	
	1. Create a consumer Gmail account. 2. Write a script that monitors the CPU usage. 3. When the CPU usage exceeds the threshold, have that script send an email using the Gmail account and smtp.gmail.com on port 25 as SMTP server.
	
	1. Create a Stackdriver Workspace, and associate your Google Cloud Platform (GCP) project with it. 2. Create an Alerting Policy in Stackdriver that uses the threshold as a trigger condition. 3. Configure your email address in the notification channel. [✔️]
	
	1. Create a Stackdriver Workspace, and associate your GCP project with it. 2. Write a script that monitors the CPU usage and sends it as a custom metric to Stackdriver. 3. Create an uptime check for the instance in Stackdriver.
	
	1. In Stackdriver Logging, create a logs-based metric to extract the CPU usage by using this regular expression: CPU Usage: ([0-9] {1,3})% 2. In Stackdriver Monitoring, create an Alerting Policy based on this metric. 3. Configure your email address in the notification channel.

	-------

	Option 1 (Gmail account and custom script):

		Reasoning:

			This option involves creating a Gmail account and using a custom script to monitor CPU usage. When the threshold is exceeded, the script sends an email using the Gmail account.
		
		Considerations:
			
			This solution involves external services (Gmail) and might not be as integrated with Google Cloud.
			
			Using Gmail for automated alerts might not be the most reliable or scalable solution.
		
		Benefits:
			
			Simplicity: Easy to set up with basic scripting.
			
			Low Cost: Gmail accounts are free.
			
	Option 2 (Stackdriver Alerting Policy):

		Reasoning:
		
			This option involves creating a Stackdriver Workspace, associating the GCP project, and setting up an Alerting Policy based on CPU threshold conditions.
		
		Considerations:
		
			Stackdriver is a native Google Cloud service, providing better integration and reliability.
			
			Alerting policies in Stackdriver are specifically designed for monitoring and alerting within Google Cloud.
		
		Benefits:
			
			Native Integration: Utilizes a Google Cloud service for monitoring and alerting.
			
			Centralized Management: Alerts are managed within the Google Cloud environment.
		
	Option 3 (Stackdriver Custom Metric and Uptime Check):

		Reasoning:
			
			This option involves creating a Stackdriver Workspace, writing a script to monitor CPU usage and send it as a custom metric to Stackdriver, and creating an uptime check for the instance.
		
		Considerations:
			
			Custom metrics in Stackdriver offer flexibility in defining specific monitoring criteria.
			
			Uptime checks can complement CPU monitoring by providing additional insights into the instance's availability.
		
		Benefits:
			
			Flexibility: Custom metrics allow for tailored monitoring.
			
			Comprehensive Monitoring: Combines CPU usage with uptime checks for a more comprehensive view.
	
	Option 4 (Stackdriver Logging-based metric and Alerting Policy):

		Reasoning:
			
			This option involves creating a logs-based metric in Stackdriver Logging to extract CPU usage and creating an Alerting Policy based on this metric.
		
		Considerations:
			
			Stackdriver Logging-based metrics provide a way to extract information from logs and use them for monitoring.
			
			This option uses a regular expression to extract CPU usage information from logs.
		
		Benefits:
			
			Utilizes Logs for Monitoring: Extracts information from logs to create custom metrics.
			
			Alerting Flexibility: Custom alerts can be created based on logs data.
		
	In summary:

		Option 1 (Gmail account and custom script): Least integrated with Google Cloud services and may not be the most reliable solution.
		
		Option 2 (Stackdriver Alerting Policy): Most integrated and straightforward solution using native Google Cloud services.
		
		Option 3 (Stackdriver Custom Metric and Uptime Check): Offers flexibility and a more comprehensive monitoring approach.
		
		Option 4 (Stackdriver Logging-based metric and Alerting Policy): Uses logs data for monitoring, providing an alternative approach.
		
		Given the Google Cloud context and the requirement for monitoring a Compute Engine instance, Option 2 (Stackdriver Alerting Policy) is the recommended choice for its native integration and reliability within the Google Cloud ecosystem.

-------

Your company is moving from an on-premises environment to Google Cloud. You have multiple development teams that use Cassandra environments as backend databases. They all need a development environment that is isolated from other Cassandra instances. You want to move to Google Cloud quickly and with minimal support effort. What should you do?
	
	1. Build an instruction guide to install Cassandra on Google Cloud. 2. Make the instruction guide accessible to your developers.
	
	1. Advise your developers to go to Cloud Marketplace. 2. Ask the developers to launch a Cassandra image for their development work. [✔️]
	
	1. Build a Cassandra Compute Engine instance and take a snapshot of it. 2. Use the snapshot to create instances for your developers.
	
	1. Build a Cassandra Compute Engine instance and take a snapshot of it. 2. Upload the snapshot to Cloud Storage and make it accessible to your developers. 3. Build instructions to create a Compute Engine instance from the snapshot so that developers can do it themselves.

	-------

	Option 1 (Instruction guide):

		Reasoning:
			
			This option involves creating an instruction guide for installing Cassandra on Google Cloud and making it accessible to developers.
		
		Considerations:
		
			Developers might need to follow the guide step-by-step, which could be time-consuming.
		
		Benefits:
		
			Control: Provides control over the installation process.
			
			Documentation: Ensures developers have clear instructions.
		
	Option 2 (Cloud Marketplace):

		Reasoning:
			
			This option involves advising developers to go to Cloud Marketplace and launch a Cassandra image for their development work.
		
		Considerations:
			
			Cloud Marketplace offers pre-configured solutions, simplifying the setup process.
		
		Benefits:
		
			Quick Deployment: Developers can quickly deploy Cassandra without manual installation steps.
			
			Standardized Images: Cloud Marketplace images are often pre-configured and tested.

	Option 3 (Compute Engine instance and snapshot):

		Reasoning:
			
			This option involves building a Cassandra Compute Engine instance, taking a snapshot of it, and using the snapshot to create instances for developers.
		
		Considerations:
			
			Creating instances from snapshots might require additional manual steps.
		
		Benefits:
			
			Replication: Allows for replicating a pre-configured Cassandra environment.
			
			Control: Provides control over the initial instance setup.

	Option 4 (Compute Engine instance, snapshot, Cloud Storage, and instructions):

		Reasoning:
			
			This option involves building a Cassandra Compute Engine instance, taking a snapshot, uploading the snapshot to Cloud Storage, and providing instructions for developers to create instances from the snapshot.
		
		Considerations:
			
			Developers might need to follow the instructions to create instances.
		
		Benefits:
			
			Flexibility: Developers can create instances as needed.
			
			Documentation: Provides clear instructions for the process.

	In summary:

		Option 1 (Instruction guide): Provides control but might be time-consuming for developers.
		
		Option 2 (Cloud Marketplace): Quick deployment with standardized images from Cloud Marketplace.
		
		Option 3 (Compute Engine instance and snapshot): Replicates a pre-configured environment but might involve additional manual steps.
		
		Option 4 (Compute Engine instance, snapshot, Cloud Storage, and instructions): Offers flexibility with clear documentation for developers.
		
		Given the goal of moving to Google Cloud quickly and with minimal support effort, Option 2 (Cloud Marketplace) is the recommended choice. It allows developers to quickly deploy Cassandra without the need for manual installation steps, leveraging pre-configured images from Cloud Marketplace. This approach minimizes support effort and accelerates the transition to Google Cloud.