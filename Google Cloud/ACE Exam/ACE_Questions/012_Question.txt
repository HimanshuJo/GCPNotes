You have a Dockerfile that you need to deploy on Kubernetes Engine. What should you do?
	
	A. Use kubectl app deploy <dockerfilename>.
	
	B. Use gcloud app deploy <dockerfilename>.
	
	C. Create a docker image from the Dockerfile and upload it to Container Registry. Create a Deployment YAML file to point to that image. Use kubectl to create the deployment with that file. [✔️]
	
	D. Create a docker image from the Dockerfile and upload it to Cloud Storage. Create a Deployment YAML file to point to that image. Use kubectl to create the deployment with that file.

-------

C. Create a docker image from the Dockerfile and upload it to Container Registry. Create a Deployment YAML file to point to that image. Use kubectl to create the deployment with that file.

	Recommended: This is the standard practice for deploying Docker containers on Kubernetes Engine. You build the Docker image, store it in a container registry (such as Google Container Registry), and then create a Kubernetes Deployment YAML file to specify the image and other deployment details.

Explanation for other options:

	A. Use kubectl app deploy <dockerfilename>:

		Incorrect syntax: The correct syntax for deploying with kubectl involves specifying the deployment YAML file or the resource directly, not the Dockerfile.
	
	B. Use gcloud app deploy <dockerfilename>:

		Incorrect command: The gcloud app deploy command is used for deploying applications to Google App Engine, not for deploying containers to Kubernetes Engine.
	
	D. Create a docker image from the Dockerfile and upload it to Cloud Storage. Create a Deployment YAML file to point to that image. Use kubectl to create the deployment with that file:

		Not a standard practice: While it is possible to store Docker images in Cloud Storage, it is not the recommended approach for deploying containers on Kubernetes Engine. Container Registry is the preferred service for hosting container images in a Kubernetes environment.